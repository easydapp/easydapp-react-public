{"version":3,"sources":["../../../src/types/connector.d.ts"],"sourcesContent":["import { ActorSubclass } from '@dfinity/agent';\nimport { IDL } from '@dfinity/candid';\nimport { JsonnableDelegationChain } from '@dfinity/identity/lib/cjs/identity/delegation';\nimport { BaseTransactionRequest } from './transfer';\nexport interface Wallet {\n    accountId: string;\n    principal: string;\n}\nexport interface BaseConnectResponse {\n    chain: JsonnableDelegationChain;\n    wallet: Wallet;\n    confirm: boolean;\n}\nexport interface IConnector {\n    init: () => Promise<boolean>;\n    config: any;\n    isConnected: () => Promise<boolean>;\n    createActor: <T>(canisterId: string, interfaceFactory: IDL.InterfaceFactory) => Promise<ActorSubclass<T> | undefined>;\n    connect: (params: {\n        delegationTargets?: Array<string>;\n        host: string;\n    }) => Promise<BaseConnectResponse | boolean>;\n    disconnect: () => Promise<boolean>;\n    principal: string | undefined;\n}\nexport interface IWalletConnector extends IConnector {\n    address: () => {\n        principal?: string;\n        accountId?: string;\n    };\n    requestTransfer: (baseTx: BaseTransactionRequest) => Promise<any>;\n    queryBalance: () => Promise<Array<{\n        amount: number;\n        canisterId: string;\n        decimals: number;\n        image?: string;\n        name: string;\n        symbol: string;\n    }> | undefined>;\n    signMessage?: (any: any) => Promise<any>;\n}\n"],"names":[],"mappings":"AAyBA,WAeC"}