{"version":3,"sources":["../../../src/types/connector.ts"],"sourcesContent":["import { ActorSubclass } from '@dfinity/agent';\nimport { IDL } from '@dfinity/candid';\nimport { JsonnableDelegationChain } from '@dfinity/identity/lib/cjs/identity/delegation';\nimport { BaseTransactionRequest } from './transfer';\n\nexport interface Wallet {\n  accountId: string;\n  principal: string;\n}\n\nexport interface BaseConnectResponse {\n  chain?: JsonnableDelegationChain;\n  wallet?: Wallet;\n  confirm?: boolean;\n}\n\nexport interface IConnector {\n  init: () => Promise<boolean>;\n  config: any;\n  isConnected: () => Promise<boolean>;\n  // TODO: Result type\n  createActor: <T>(canisterId: string, interfaceFactory: IDL.InterfaceFactory) => Promise<ActorSubclass<T> | undefined>;\n  // TODO: Result type\n  connect: (params: { delegationTargets?: Array<string>; host: string }) => Promise<BaseConnectResponse | boolean>;\n  // TODO: Result type\n  disconnect: () => Promise<boolean>;\n  principal: string | undefined;\n}\n\nexport interface IWalletConnector extends IConnector {\n  // TODO: Result type?\n  address: () => {\n    principal?: string;\n    accountId?: string;\n  };\n  requestTransfer: (baseTx: BaseTransactionRequest) => Promise<any>;\n  queryBalance: () => Promise<\n    | Array<{\n        amount: number;\n        canisterId: string;\n        decimals: number;\n        image?: string;\n        name: string;\n        symbol: string;\n      }>\n    | undefined\n  >;\n  signMessage?: (message: any) => Promise<any>;\n  // getManagementCanister: (any) => Promise<any>\n  // callClientRPC: (any) => Promise<any>\n  // requestBurnXTC: (any) => Promise<any>\n  // batchTransactions: (any) => Promise<any>\n}\n\n// type ProviderOptions = {\n//   connector: IConnector,\n// }\n"],"names":[],"mappings":"AA6BA,WAuBC"}