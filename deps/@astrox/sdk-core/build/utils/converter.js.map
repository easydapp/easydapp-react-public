{"version":3,"sources":["../../../src/utils/converter.ts"],"sourcesContent":["/* eslint-disable no-useless-catch */\nimport { Principal } from '@dfinity/principal';\nimport { sha224 } from 'js-sha256';\nimport { Buffer } from 'buffer';\nimport crc from 'crc';\nimport { ALPHANUM_REGEX, CANISTER_MAX_LENGTH, SUB_ACCOUNT_BYTE_LENGTH } from './constants';\nimport { AccountIdentifier, Balance, SubAccount } from './common/types';\n\nexport const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.getBigUint64 === 'function') {\n    return view.getBigUint64(0);\n  } else {\n    const high = BigInt(view.getUint32(0));\n    const low = BigInt(view.getUint32(4));\n\n    return (high << BigInt(32)) + low;\n  }\n};\n\nconst TWO_TO_THE_32 = BigInt(1) << BigInt(32);\nexport const bigIntToUint8Array = (value: bigint): Uint8Array => {\n  const array = new Uint8Array(8);\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.setBigUint64 === 'function') {\n    view.setBigUint64(0, value);\n  } else {\n    view.setUint32(0, Number(value >> BigInt(32)));\n    view.setUint32(4, Number(value % TWO_TO_THE_32));\n  }\n\n  return array;\n};\n\nexport const arrayBufferToArrayOfNumber = (buffer: ArrayBuffer): Array<number> => {\n  const typedArray = new Uint8Array(buffer);\n  return Array.from(typedArray);\n};\n\nexport const arrayOfNumberToUint8Array = (numbers: Array<number>): Uint8Array => {\n  return new Uint8Array(numbers);\n};\n\nexport const arrayOfNumberToArrayBuffer = (numbers: Array<number>): ArrayBuffer => {\n  return arrayOfNumberToUint8Array(numbers).buffer;\n};\n\nexport const arrayBufferToNumber = (buffer: ArrayBuffer): number => {\n  const view = new DataView(buffer);\n  return view.getUint32(view.byteLength - 4);\n};\n\nexport const numberToArrayBuffer = (value: number, byteLength: number): ArrayBuffer => {\n  const buffer = new ArrayBuffer(byteLength);\n  new DataView(buffer).setUint32(byteLength - 4, value);\n  return buffer;\n};\n\nexport const asciiStringToByteArray = (text: string): Array<number> => {\n  return Array.from(text).map(c => c.charCodeAt(0));\n};\n\nexport const toSubAccountId = (subAccount: Array<number>): number => {\n  const bytes = arrayOfNumberToArrayBuffer(subAccount);\n  return arrayBufferToNumber(bytes);\n};\n\nexport const fromSubAccountId = (subAccountId: number): Array<number> => {\n  const buffer = numberToArrayBuffer(subAccountId, SUB_ACCOUNT_BYTE_LENGTH);\n  return arrayBufferToArrayOfNumber(buffer);\n};\n\nexport const accountIdentifierToBytes = (accountIdentifier: AccountIdentifier): Uint8Array => {\n  return Uint8Array.from(Buffer.from(accountIdentifier, 'hex')).subarray(4);\n};\n\nexport const accountIdentifierFromBytes = (accountIdentifier: Uint8Array): AccountIdentifier => {\n  return Buffer.from(accountIdentifier).toString('hex');\n};\n\nexport const principalToAccountIdentifier = (\n  principal: Principal,\n  subAccount?: Uint8Array,\n): string => {\n  // Hash (sha224) the principal, the subAccount and some padding\n  const padding = asciiStringToByteArray('\\x0Aaccount-id');\n\n  const shaObj = sha224.create();\n  shaObj.update([...padding, ...principal.toUint8Array(), ...(subAccount ?? Array(32).fill(0))]);\n  const hash = new Uint8Array(shaObj.array());\n\n  // Prepend the checksum of the hash and convert to a hex string\n  const checksum = calculateCrc32(hash);\n  const bytes = new Uint8Array([...checksum, ...hash]);\n  return toHexString(bytes);\n};\n\nexport const principalToSubAccount = (principal: Principal): SubAccount => {\n  const bytes = principal.toUint8Array();\n  const subAccount = new Uint8Array(32);\n  subAccount[0] = bytes.length;\n  subAccount.set(bytes, 1);\n  return subAccount;\n};\n\nexport const stringToAccountIdentifier = (str: string): AccountIdentifier | undefined => {\n  try {\n    if (str.length === 64) {\n      return str;\n    }\n    if (str.length === 63) {\n      return principalToAccountIdentifier(Principal.fromText(str));\n    }\n    return undefined;\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst toHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\n// 4 bytes\nexport const calculateCrc32 = (bytes: Uint8Array): Uint8Array => {\n  const checksumArrayBuf = new ArrayBuffer(4);\n  const view = new DataView(checksumArrayBuf);\n  view.setUint32(0, crc.crc32(Buffer.from(bytes)), false);\n  return Buffer.from(checksumArrayBuf);\n};\n\nexport const E8S_PER_ICP = 100_000_000;\n\nexport enum TokenSymbol {\n  ICP = 'ICP',\n}\n\nexport const getDecimalFromSymbol = (sym: string) => {\n  switch (sym) {\n    case TokenSymbol.ICP:\n      return 8;\n    default:\n      return 8;\n  }\n};\n\nexport interface TokenMapItem {\n  [key: string]: { amount: number; symbol: string; balanceString: BalanceString };\n}\n\n\n\nexport const formatAssetBySymbol = (\n  _amount: bigint,\n  symbol: string,\n):\n  | { amount: number; symbol: string; balanceString: BalanceString }\n  | undefined => {\n  const balanceString = balanceToString(_amount, getDecimalFromSymbol(symbol));\n  const amount = Number(balanceString.total);\n  const tokenMap: TokenMapItem[] = [\n    {\n      ICP: {\n        amount: amount,\n        balanceString,\n        symbol: 'ICP',\n      },\n    },\n  ];\n\n  const found = tokenMap.find((v) => v[symbol] !== undefined);\n  return found?.[symbol];\n};\n\nexport const parseBalance = (balance: Balance): string => {\n  return (parseInt(balance.value, 10) / 10 ** balance.decimals).toString();\n};\n\nexport const balanceFromString = (\n  balance: string,\n  decimal = 8,\n): bigint => {\n  const list = balance.split('.');\n  const aboveZero = list[0];\n  const aboveZeroBigInt = BigInt(aboveZero) * BigInt(1 * 10 ** decimal);\n  let belowZeroBigInt = BigInt(0);\n  const belowZero = list[1];\n  if (belowZero !== undefined) {\n    belowZeroBigInt = BigInt(\n      belowZero.substring(0, decimal).padEnd(decimal, '0'),\n    );\n  }\n  return aboveZeroBigInt + belowZeroBigInt;\n};\n\nexport interface BalanceString {\n  total: string;\n  aboveZero: string;\n  belowZero: string;\n  formatAboveZero: string;\n}\n\nexport const balanceToString = (\n  balance: bigint,\n  decimal = 8,\n): BalanceString => {\n  const balanceString = balance.toString(10);\n  const balanceStringLength = balanceString.length;\n  let aboveZero = '0';\n  let belowZero = '0'.padEnd(decimal, '0');\n  if (balanceStringLength > decimal) {\n    belowZero = balanceString.substring(\n      balanceStringLength - decimal,\n      balanceStringLength,\n    );\n    aboveZero = balanceString.substring(0, balanceStringLength - decimal);\n  } else {\n    belowZero = balanceString.padStart(decimal, '0');\n  }\n  const formatAboveZero = String(aboveZero).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  return { total: aboveZero + '.' + belowZero, aboveZero, belowZero, formatAboveZero };\n};\n\nexport const validateAccountId = (text: string): boolean =>\n  text.length === 64 && ALPHANUM_REGEX.test(text);\n\nexport const validatePrincipalId = (text: string) => {\n  try {\n    return text === Principal.fromText(text).toString();\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const validateCanisterId = (text: string) => {\n  try {\n    return text.length <= CANISTER_MAX_LENGTH && validatePrincipalId(text);\n  } catch (e) {\n    return false;\n  }\n};\n\nexport enum AddressType {\n  PRINCIPAL = 'principal',\n  ACCOUNT = 'accountId',\n  CANISTER = 'canister',\n  ERC20 = 'erc20',\n  INVALID = 'invalid',\n}\n\nexport const getAddressType = (text: string) => {\n  try {\n    if (validateAccountId(text)) {\n      return AddressType.ACCOUNT;\n    } else if (validatePrincipalId(text)) {\n      return AddressType.PRINCIPAL;\n    } else if (validateCanisterId(text)) {\n      return AddressType.CANISTER;\n    }\n    return AddressType.INVALID;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["Principal","sha224","Buffer","crc","ALPHANUM_REGEX","CANISTER_MAX_LENGTH","SUB_ACCOUNT_BYTE_LENGTH","uint8ArrayToBigInt","array","view","DataView","buffer","byteOffset","byteLength","getBigUint64","high","BigInt","getUint32","low","TWO_TO_THE_32","bigIntToUint8Array","value","Uint8Array","setBigUint64","setUint32","Number","arrayBufferToArrayOfNumber","typedArray","Array","from","arrayOfNumberToUint8Array","numbers","arrayOfNumberToArrayBuffer","arrayBufferToNumber","numberToArrayBuffer","ArrayBuffer","asciiStringToByteArray","text","map","c","charCodeAt","toSubAccountId","subAccount","bytes","fromSubAccountId","subAccountId","accountIdentifierToBytes","accountIdentifier","subarray","accountIdentifierFromBytes","toString","principalToAccountIdentifier","principal","padding","shaObj","create","update","toUint8Array","fill","hash","checksum","calculateCrc32","toHexString","principalToSubAccount","length","set","stringToAccountIdentifier","str","fromText","undefined","error","reduce","byte","padStart","checksumArrayBuf","crc32","E8S_PER_ICP","TokenSymbol","getDecimalFromSymbol","sym","formatAssetBySymbol","_amount","symbol","balanceString","balanceToString","amount","total","tokenMap","ICP","found","find","v","parseBalance","balance","parseInt","decimals","balanceFromString","decimal","list","split","aboveZero","aboveZeroBigInt","belowZeroBigInt","belowZero","substring","padEnd","balanceStringLength","formatAboveZero","String","replace","validateAccountId","test","validatePrincipalId","e","validateCanisterId","AddressType","getAddressType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,MAAM,QAAQ,SAAS;AAChC,OAAOC,SAAS,MAAM;AACtB,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,uBAAuB,QAAQ,cAAc;AAG3F,OAAO,IAAMC,qBAAqB,SAACC;IACjC,IAAMC,OAAO,IAAIC,SAASF,MAAMG,MAAM,EAAEH,MAAMI,UAAU,EAAEJ,MAAMK,UAAU;IAC1E,IAAI,OAAOJ,KAAKK,YAAY,KAAK,YAAY;QAC3C,OAAOL,KAAKK,YAAY,CAAC;IAC3B,OAAO;QACL,IAAMC,OAAOC,OAAOP,KAAKQ,SAAS,CAAC;QACnC,IAAMC,MAAMF,OAAOP,KAAKQ,SAAS,CAAC;QAElC,OAAO,AAACF,CAAAA,QAAQC,OAAO,GAAE,IAAKE;IAChC;AACF,EAAE;AAEF,IAAMC,gBAAgBH,OAAO,MAAMA,OAAO;AAC1C,OAAO,IAAMI,qBAAqB,SAACC;IACjC,IAAMb,QAAQ,IAAIc,WAAW;IAC7B,IAAMb,OAAO,IAAIC,SAASF,MAAMG,MAAM,EAAEH,MAAMI,UAAU,EAAEJ,MAAMK,UAAU;IAC1E,IAAI,OAAOJ,KAAKc,YAAY,KAAK,YAAY;QAC3Cd,KAAKc,YAAY,CAAC,GAAGF;IACvB,OAAO;QACLZ,KAAKe,SAAS,CAAC,GAAGC,OAAOJ,SAASL,OAAO;QACzCP,KAAKe,SAAS,CAAC,GAAGC,OAAOJ,QAAQF;IACnC;IAEA,OAAOX;AACT,EAAE;AAEF,OAAO,IAAMkB,6BAA6B,SAACf;IACzC,IAAMgB,aAAa,IAAIL,WAAWX;IAClC,OAAOiB,MAAMC,IAAI,CAACF;AACpB,EAAE;AAEF,OAAO,IAAMG,4BAA4B,SAACC;IACxC,OAAO,IAAIT,WAAWS;AACxB,EAAE;AAEF,OAAO,IAAMC,6BAA6B,SAACD;IACzC,OAAOD,0BAA0BC,SAASpB,MAAM;AAClD,EAAE;AAEF,OAAO,IAAMsB,sBAAsB,SAACtB;IAClC,IAAMF,OAAO,IAAIC,SAASC;IAC1B,OAAOF,KAAKQ,SAAS,CAACR,KAAKI,UAAU,GAAG;AAC1C,EAAE;AAEF,OAAO,IAAMqB,sBAAsB,SAACb,OAAeR;IACjD,IAAMF,SAAS,IAAIwB,YAAYtB;IAC/B,IAAIH,SAASC,QAAQa,SAAS,CAACX,aAAa,GAAGQ;IAC/C,OAAOV;AACT,EAAE;AAEF,OAAO,IAAMyB,yBAAyB,SAACC;IACrC,OAAOT,MAAMC,IAAI,CAACQ,MAAMC,GAAG,CAACC,SAAAA;eAAKA,EAAEC,UAAU,CAAC;;AAChD,EAAE;AAEF,OAAO,IAAMC,iBAAiB,SAACC;IAC7B,IAAMC,QAAQX,2BAA2BU;IACzC,OAAOT,oBAAoBU;AAC7B,EAAE;AAEF,OAAO,IAAMC,mBAAmB,SAACC;IAC/B,IAAMlC,SAASuB,oBAAoBW,cAAcvC;IACjD,OAAOoB,2BAA2Bf;AACpC,EAAE;AAEF,OAAO,IAAMmC,2BAA2B,SAACC;IACvC,OAAOzB,WAAWO,IAAI,CAAC3B,OAAO2B,IAAI,CAACkB,mBAAmB,QAAQC,QAAQ,CAAC;AACzE,EAAE;AAEF,OAAO,IAAMC,6BAA6B,SAACF;IACzC,OAAO7C,OAAO2B,IAAI,CAACkB,mBAAmBG,QAAQ,CAAC;AACjD,EAAE;AAEF,OAAO,IAAMC,+BAA+B,SAC1CC,WACAV;IAGA,IAAMW,UAAUjB,uBAAuB;IAEvC,IAAMkB,SAASrD,OAAOsD,MAAM;IAC5BD,OAAOE,MAAM,CAAC,AAAC,qBAAGH,gBAAS,qBAAGD,UAAUK,YAAY,KAAI,qBAAIf,uBAAAA,wBAAAA,aAAcd,MAAM,IAAI8B,IAAI,CAAC;IACzF,IAAMC,OAAO,IAAIrC,WAAWgC,OAAO9C,KAAK;IAGxC,IAAMoD,WAAWC,eAAeF;IAChC,IAAMhB,QAAQ,IAAIrB,WAAW,AAAC,qBAAGsC,iBAAU,qBAAGD;IAC9C,OAAOG,YAAYnB;AACrB,EAAE;AAEF,OAAO,IAAMoB,wBAAwB,SAACX;IACpC,IAAMT,QAAQS,UAAUK,YAAY;IACpC,IAAMf,aAAa,IAAIpB,WAAW;IAClCoB,UAAU,CAAC,EAAE,GAAGC,MAAMqB,MAAM;IAC5BtB,WAAWuB,GAAG,CAACtB,OAAO;IACtB,OAAOD;AACT,EAAE;AAEF,OAAO,IAAMwB,4BAA4B,SAACC;IACxC,IAAI;QACF,IAAIA,IAAIH,MAAM,KAAK,IAAI;YACrB,OAAOG;QACT;QACA,IAAIA,IAAIH,MAAM,KAAK,IAAI;YACrB,OAAOb,6BAA6BnD,UAAUoE,QAAQ,CAACD;QACzD;QACA,OAAOE;IACT,EAAE,OAAOC,OAAO;QACd,OAAOD;IACT;AACF,EAAE;AAEF,IAAMP,cAAc,SAACnB;WACnBA,MAAM4B,MAAM,CAAC,SAACJ,KAAKK;eAASL,MAAMK,KAAKtB,QAAQ,CAAC,IAAIuB,QAAQ,CAAC,GAAG;OAAM;;AAGxE,OAAO,IAAMZ,iBAAiB,SAAClB;IAC7B,IAAM+B,mBAAmB,IAAIvC,YAAY;IACzC,IAAM1B,OAAO,IAAIC,SAASgE;IAC1BjE,KAAKe,SAAS,CAAC,GAAGrB,IAAIwE,KAAK,CAACzE,OAAO2B,IAAI,CAACc,SAAS;IACjD,OAAOzC,OAAO2B,IAAI,CAAC6C;AACrB,EAAE;AAEF,OAAO,IAAME,cAAc,UAAY;AAEvC,OAAO,IAAA,AAAKC,qCAAAA;;WAAAA;MAEX;AAED,OAAO,IAAMC,uBAAuB,SAACC;IACnC,OAAQA;QACN;YACE,OAAO;QACT;YACE,OAAO;IACX;AACF,EAAE;AAQF,OAAO,IAAMC,sBAAsB,SACjCC,SACAC;IAIA,IAAMC,gBAAgBC,gBAAgBH,SAASH,qBAAqBI;IACpE,IAAMG,SAAS5D,OAAO0D,cAAcG,KAAK;IACzC,IAAMC,WAA2B;QAC/B;YACEC,KAAK;gBACHH,QAAQA;gBACRF,eAAAA;gBACAD,QAAQ;YACV;QACF;KACD;IAED,IAAMO,QAAQF,SAASG,IAAI,CAAC,SAACC;eAAMA,CAAC,CAACT,OAAO,KAAKb;;IACjD,OAAOoB,kBAAAA,4BAAAA,KAAO,CAACP,OAAO;AACxB,EAAE;AAEF,OAAO,IAAMU,eAAe,SAACC;IAC3B,OAAO,AAACC,CAAAA,SAASD,QAAQxE,KAAK,EAAE,MAAM,KAAA,IAAA,IAAMwE,QAAQE,QAAQ,CAAD,EAAG7C,QAAQ;AACxE,EAAE;AAEF,OAAO,IAAM8C,oBAAoB,SAC/BH;QACAI,2EAAU;IAEV,IAAMC,OAAOL,QAAQM,KAAK,CAAC;IAC3B,IAAMC,YAAYF,IAAI,CAAC,EAAE;IACzB,IAAMG,kBAAkBrF,OAAOoF,aAAapF,OAAO,IAAI,KAAA,IAAA,IAAMiF;IAC7D,IAAIK,kBAAkBtF,OAAO;IAC7B,IAAMuF,YAAYL,IAAI,CAAC,EAAE;IACzB,IAAIK,cAAclC,WAAW;QAC3BiC,kBAAkBtF,OAChBuF,UAAUC,SAAS,CAAC,GAAGP,SAASQ,MAAM,CAACR,SAAS;IAEpD;IACA,OAAOI,kBAAkBC;AAC3B,EAAE;AASF,OAAO,IAAMlB,kBAAkB,SAC7BS;QACAI,2EAAU;IAEV,IAAMd,gBAAgBU,QAAQ3C,QAAQ,CAAC;IACvC,IAAMwD,sBAAsBvB,cAAcnB,MAAM;IAChD,IAAIoC,YAAY;IAChB,IAAIG,YAAY,IAAIE,MAAM,CAACR,SAAS;IACpC,IAAIS,sBAAsBT,SAAS;QACjCM,YAAYpB,cAAcqB,SAAS,CACjCE,sBAAsBT,SACtBS;QAEFN,YAAYjB,cAAcqB,SAAS,CAAC,GAAGE,sBAAsBT;IAC/D,OAAO;QACLM,YAAYpB,cAAcV,QAAQ,CAACwB,SAAS;IAC9C;IACA,IAAMU,kBAAkBC,OAAOR,WAAWS,OAAO,CAAC,yBAAyB;IAE3E,OAAO;QAAEvB,OAAOc,YAAY,MAAMG;QAAWH,WAAAA;QAAWG,WAAAA;QAAWI,iBAAAA;IAAgB;AACrF,EAAE;AAEF,OAAO,IAAMG,oBAAoB,SAACzE;WAChCA,KAAK2B,MAAM,KAAK,MAAM5D,eAAe2G,IAAI,CAAC1E;EAAM;AAElD,OAAO,IAAM2E,sBAAsB,SAAC3E;IAClC,IAAI;QACF,OAAOA,SAASrC,UAAUoE,QAAQ,CAAC/B,MAAMa,QAAQ;IACnD,EAAE,OAAO+D,GAAG;QACV,OAAO;IACT;AACF,EAAE;AAEF,OAAO,IAAMC,qBAAqB,SAAC7E;IACjC,IAAI;QACF,OAAOA,KAAK2B,MAAM,IAAI3D,uBAAuB2G,oBAAoB3E;IACnE,EAAE,OAAO4E,GAAG;QACV,OAAO;IACT;AACF,EAAE;AAEF,OAAO,IAAA,AAAKE,qCAAAA;;;;;;WAAAA;MAMX;AAED,OAAO,IAAMC,iBAAiB,SAAC/E;IAC7B,IAAI;QACF,IAAIyE,kBAAkBzE,OAAO;YAC3B;QACF,OAAO,IAAI2E,oBAAoB3E,OAAO;YACpC;QACF,OAAO,IAAI6E,mBAAmB7E,OAAO;YACnC;QACF;QACA;IACF,EAAE,OAAOiC,OAAO;QACd,MAAMA;IACR;AACF,EAAE"}