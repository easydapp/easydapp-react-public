{"version":3,"sources":["../../../src/utils/converter.d.ts"],"sourcesContent":["import { Principal } from '@dfinity/principal';\nimport { AccountIdentifier, Balance, SubAccount } from './common/types';\nexport declare const uint8ArrayToBigInt: (array: Uint8Array) => bigint;\nexport declare const bigIntToUint8Array: (value: bigint) => Uint8Array;\nexport declare const arrayBufferToArrayOfNumber: (buffer: ArrayBuffer) => Array<number>;\nexport declare const arrayOfNumberToUint8Array: (numbers: Array<number>) => Uint8Array;\nexport declare const arrayOfNumberToArrayBuffer: (numbers: Array<number>) => ArrayBuffer;\nexport declare const arrayBufferToNumber: (buffer: ArrayBuffer) => number;\nexport declare const numberToArrayBuffer: (value: number, byteLength: number) => ArrayBuffer;\nexport declare const asciiStringToByteArray: (text: string) => Array<number>;\nexport declare const toSubAccountId: (subAccount: Array<number>) => number;\nexport declare const fromSubAccountId: (subAccountId: number) => Array<number>;\nexport declare const accountIdentifierToBytes: (accountIdentifier: AccountIdentifier) => Uint8Array;\nexport declare const accountIdentifierFromBytes: (accountIdentifier: Uint8Array) => AccountIdentifier;\nexport declare const principalToAccountIdentifier: (principal: Principal, subAccount?: Uint8Array) => string;\nexport declare const principalToSubAccount: (principal: Principal) => SubAccount;\nexport declare const stringToAccountIdentifier: (str: string) => AccountIdentifier | undefined;\nexport declare const calculateCrc32: (bytes: Uint8Array) => Uint8Array;\nexport declare const E8S_PER_ICP = 100000000;\nexport declare enum TokenSymbol {\n    ICP = \"ICP\"\n}\nexport declare const getDecimalFromSymbol: (sym: string) => number;\nexport interface TokenMapItem {\n    [key: string]: {\n        amount: number;\n        symbol: string;\n        balanceString: BalanceString;\n    };\n}\nexport declare const formatAssetBySymbol: (_amount: bigint, symbol: string) => {\n    amount: number;\n    symbol: string;\n    balanceString: BalanceString;\n} | undefined;\nexport declare const parseBalance: (balance: Balance) => string;\nexport declare const balanceFromString: (balance: string, decimal?: number) => bigint;\nexport interface BalanceString {\n    total: string;\n    aboveZero: string;\n    belowZero: string;\n    formatAboveZero: string;\n}\nexport declare const balanceToString: (balance: bigint, decimal?: number) => BalanceString;\nexport declare const validateAccountId: (text: string) => boolean;\nexport declare const validatePrincipalId: (text: string) => boolean;\nexport declare const validateCanisterId: (text: string) => boolean;\nexport declare enum AddressType {\n    PRINCIPAL = \"principal\",\n    ACCOUNT = \"accountId\",\n    CANISTER = \"canister\",\n    ERC20 = \"erc20\",\n    INVALID = \"invalid\"\n}\nexport declare const getAddressType: (text: string) => AddressType.PRINCIPAL | AddressType.ACCOUNT | AddressType.CANISTER | AddressType.INVALID;\n"],"names":[],"mappings":"AAsDA,WAAgJ"}