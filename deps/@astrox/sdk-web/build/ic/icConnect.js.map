{"version":3,"sources":["../../../src/ic/icConnect.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Actor, ActorSubclass, HttpAgent, Identity } from '@dfinity/agent';\nimport { InterfaceFactory } from '@dfinity/candid/lib/cjs/idl';\nimport { Principal } from '@dfinity/principal';\nimport { AuthClient } from './icAuthClient';\nimport { IDENTITY_PROVIDER_DEFAULT } from './icStorage';\nimport { ICWindow } from './icWindow';\nimport { LedgerConnection } from '../connections/ledgerConnection';\nimport {\n  ConnectOptions,\n  DelegationMode,\n  EventHandler,\n  PermissionsType,\n  SignerMessageKind,\n  SignerOptions,\n  SignerResponseFailure,\n  SignerResponseMessage,\n  SignerResponseSuccess,\n  TransactionMessageKind,\n  TransactionOptions,\n  TransactionResponseFailure,\n  TransactionResponseMessage,\n  TransactionResponseSuccess,\n} from '../types';\nimport { Wallet } from '@astrox/sdk-core';\n\nconst days = BigInt(1);\nconst hours = BigInt(24);\nconst nanoseconds = BigInt(3600000000000);\nconst WALLET_PROVIDER_DEFAULT = 'https://63k2f-nyaaa-aaaah-aakla-cai.raw.ic0.app';\nconst WALLET_PROVIDER_ENDPOINT = '#transaction';\nconst SIGNER_PROVIDER_DEFAULT = 'https://63k2f-nyaaa-aaaah-aakla-cai.raw.ic0.app';\nconst SIGNER_PROVIDER_ENDPOINT = '#signer';\n\ndeclare global {\n  interface Window {\n    ic: IC & any;\n  }\n}\n\nfunction targetsFilter(arr: unknown[]) {\n  return arr.filter(value => typeof value === 'string' && value.trim());\n}\n\nexport interface LoginOptions {\n  identityProvider: string | URL;\n  // Maximum authorization expiration is 8 days\n  maxTimeToLive: bigint;\n  permissions: PermissionsType[];\n  delegationTargets: string[] | undefined;\n  delegationModes?: Array<DelegationMode>;\n}\n\nconst FRAME_SETTING = 'height=600, width=800, top=0, right=0, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no';\nconst FRAME_SETTING_PAYMENT = 'height=600, width=480, top=0, right=0, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no';\n\nexport class IC extends ICWindow {\n  #authClient: AuthClient;\n  #agent?: HttpAgent;\n  #localLedger?: LedgerConnection;\n  #walletProvider?: string;\n  #signerProvider?: string;\n  #useFrame?= false; // a local ledger to query balance only\n  #loginOption?: LoginOptions;\n  #connectOptions?: ConnectOptions;\n\n  protected constructor(authClient: AuthClient, agent: HttpAgent) {\n    super();\n    this.#authClient = authClient;\n    this.#agent = agent;\n    this.injectWindow();\n  }\n\n  public static async create(config: any): Promise<IC> {\n    let delegationTargets: string[] = ['ryjl3-tyaaa-aaaaa-aaaba-cai'];\n\n    if (config && config?.delegationTargets) {\n      delegationTargets = [...new Set(delegationTargets.concat(config?.delegationTargets))];\n    }\n    if (config && config?.ledgerCanisterId) {\n      delegationTargets = [...new Set(delegationTargets.concat(config?.ledgerCanisterId))];\n    }\n    if (config && config?.whitelist) {\n      delegationTargets = [...new Set(delegationTargets.concat(config?.whitelist))];\n    }\n\n    delegationTargets = targetsFilter([...new Set(delegationTargets)]) as string[];\n\n    const authClient = await AuthClient.create({\n      ...config,\n      delegationTargets,\n      idpWindowOption: config.useFrame === true ? FRAME_SETTING : undefined,\n    });\n\n    const identity = authClient.getIdentity();\n    const agent = new HttpAgent({ identity, host: config.host ?? window.location.origin });\n    if (config.dev) {\n      await agent.fetchRootKey();\n    }\n    const newIC = new IC(authClient, agent);\n\n    newIC._setWalletProvider(config?.walletProviderUrl);\n    newIC._setSignerProvider(config?.signerProviderUrl);\n    newIC._setUseFrame(config?.useFrame);\n\n    if (await newIC.isAuthenticated()) {\n      await newIC.handleAuthenticated({\n        ledgerCanisterId: config.ledgerCanisterId ?? 'ryjl3-tyaaa-aaaaa-aaaba-cai',\n        ledgerHost: config.ledgerHost ?? 'https://boundary.ic0.app/',\n      });\n      await config?.onAuthenticated?.(newIC);\n    }\n    const provider = config?.identityProvider ?? IDENTITY_PROVIDER_DEFAULT;\n    newIC._setConnectOptions({ ...config, dev: config.dev, delegationTargets });\n    newIC._setLoginOptions({\n      ...config,\n      identityProvider: provider,\n      // Maximum authorization expiration is 8 days\n      maxTimeToLive: config?.maxTimeToLive ?? days * hours * nanoseconds,\n      permissions: config?.permissions ?? [PermissionsType.identity],\n      delegationTargets,\n    });\n    return newIC;\n  }\n\n  public async connect(connectOptions: ConnectOptions): Promise<IC> {\n    let delegationModes = connectOptions.delegationModes;\n    if (delegationModes && delegationModes.length) {\n      const modes: DelegationMode[] = ['global', 'domain'];\n      const hasNotInclude = delegationModes.some(v => !modes.includes(v));\n      if (hasNotInclude) {\n        throw new Error('`delegationModes` elements only support `global` and `private`');\n      }\n      delegationModes = [...new Set(delegationModes)];\n    }\n    const provider = connectOptions?.identityProvider ?? IDENTITY_PROVIDER_DEFAULT;\n\n    let delegationTargets: string[] = ['ryjl3-tyaaa-aaaaa-aaaba-cai'];\n\n    if (connectOptions && connectOptions?.delegationTargets) {\n      delegationTargets = [...new Set(delegationTargets.concat(connectOptions?.delegationTargets))];\n    }\n    if (connectOptions && connectOptions?.ledgerCanisterId) {\n      delegationTargets = [...new Set(delegationTargets.concat(connectOptions?.ledgerCanisterId))];\n    }\n    if (connectOptions && connectOptions?.whitelist) {\n      delegationTargets = [...new Set(delegationTargets.concat(connectOptions?.whitelist))];\n    }\n\n    delegationTargets = targetsFilter([...new Set(delegationTargets)]) as string[];\n\n    this._setConnectOptions({ ...connectOptions, delegationTargets });\n    this._setLoginOptions({\n      ...connectOptions,\n      identityProvider: provider,\n      // Maximum authorization expiration is 8 days\n      maxTimeToLive: connectOptions?.maxTimeToLive ?? days * hours * nanoseconds,\n      permissions: connectOptions?.permissions ?? [PermissionsType.identity],\n      delegationTargets,\n      delegationModes,\n    });\n    await new Promise((resolve, reject) => {\n      this.getAuthClient().login({\n        ...this.#loginOption,\n        onSuccess: async () => {\n          const identity = this.getAuthClient().getIdentity();\n          this.#agent = new HttpAgent({ identity, host: connectOptions.host ?? window.location.origin });\n\n          if (connectOptions.dev) {\n            await this.#agent.fetchRootKey();\n          }\n\n          await this.handleAuthenticated({\n            ledgerCanisterId: connectOptions.ledgerCanisterId,\n            ledgerHost: connectOptions.ledgerHost ?? 'https://boundary.ic0.app/',\n          });\n          connectOptions?.onSuccess ? await connectOptions?.onSuccess?.() : await connectOptions?.onAuthenticated?.(this);\n          resolve(this);\n        },\n        onError: this.handleError,\n      });\n    });\n    return this;\n  }\n\n  public async isAuthenticated(): Promise<boolean> {\n    const result = await this.#authClient.isAuthenticated();\n    return result;\n  }\n\n  public get identity(): Identity {\n    return this.#authClient.getIdentity();\n  }\n\n  public get principal(): Principal {\n    return this.identity.getPrincipal();\n  }\n\n  public get wallet(): Wallet | undefined {\n    return this.#authClient.wallet;\n  }\n\n  public get delegationTargets(): string[] {\n    return this.#authClient.getDelegateTargets();\n  }\n\n  private _setWalletProvider(provider?: string) {\n    this.#walletProvider = provider;\n  }\n\n  private _setSignerProvider(provider?: string) {\n    this.#signerProvider = provider;\n  }\n\n  private _setUseFrame(useFrame: boolean) {\n    this.#useFrame = useFrame;\n  }\n\n  private _setConnectOptions(options: ConnectOptions) {\n    this.#connectOptions = options;\n  }\n\n  private _setLoginOptions(options: LoginOptions) {\n    this.#loginOption = options;\n  }\n\n  public get loginOption() {\n    return this.#loginOption;\n  }\n\n  public get connectOptions() {\n    return this.#connectOptions;\n  }\n\n  protected getAuthClient(): AuthClient {\n    return this.#authClient;\n  }\n\n  public disconnect = async (options: { returnTo?: string } = {}): Promise<void> => {\n    this.#agent = undefined;\n    this.#localLedger = undefined;\n    this.#walletProvider = undefined;\n    this.#signerProvider = undefined;\n    this.#loginOption = undefined;\n    this.#connectOptions = undefined;\n    await this.getAuthClient().logout(options);\n  };\n\n  public queryBalance = async (): Promise<bigint> => {\n    if (this.wallet === undefined) {\n      throw Error('Wallet address is not found');\n    }\n    if (this.#localLedger === undefined) {\n      throw Error('Ledger connection failed');\n    }\n    const result = await this.#localLedger?.getBalance(this.wallet!.accountId);\n    return result;\n  };\n\n  public handleAuthenticated = async ({ ledgerCanisterId, ledgerHost }: { ledgerCanisterId?: string; ledgerHost?: string }): Promise<void> => {\n    const actorResult = await LedgerConnection.createActor(this.getAuthClient().getDelegationIdentity()!, ledgerCanisterId, ledgerHost);\n\n    this.#localLedger = LedgerConnection.createConnection(\n      this.getAuthClient().getInnerKey()!,\n      this.getAuthClient().getDelegationIdentity()!,\n      ledgerCanisterId,\n      actorResult.actor,\n      this.#agent,\n    );\n  };\n\n  private injectWindow(): void {\n    if (window.ic !== undefined) {\n      window.ic.astrox = this;\n    } else {\n      window.ic = { astrox: this };\n    }\n  }\n\n  private async _appendAuth(canisterId: string): Promise<IC> {\n    const currentTargets = targetsFilter(this.#authClient.getDelegateTargets()) as string[];\n    if (currentTargets.includes(canisterId)) {\n      return this;\n    } else {\n      let newTargets = [...currentTargets, canisterId];\n      newTargets = targetsFilter(newTargets) as string[];\n      this._setConnectOptions({ ...this.#connectOptions, delegationTargets: newTargets });\n      this._setLoginOptions({\n        ...this.#loginOption!,\n        delegationTargets: newTargets,\n      });\n      return await new Promise((resolve, reject) => {\n        this.getAuthClient().login({\n          ...this.#loginOption,\n          authType: 'authorize-append',\n          delegationTargets: newTargets,\n          onSuccess: async () => {\n            const identity = this.getAuthClient().getIdentity();\n            this.#agent = new HttpAgent({ identity, host: this.#connectOptions !== undefined ? this.#connectOptions.host : window.location.origin });\n            if (this.#connectOptions?.dev) {\n              await this.#agent.fetchRootKey();\n            }\n            await this.handleAuthenticated({\n              ledgerCanisterId: this.#connectOptions?.ledgerCanisterId,\n              ledgerHost: this.#connectOptions?.ledgerHost ?? 'https://boundary.ic0.app/',\n            });\n            (await this.#connectOptions?.onSuccess) ? await this.#connectOptions?.onSuccess?.() : await this.#connectOptions?.onAuthenticated?.(this);\n            resolve(this);\n          },\n          onError: this.handleError,\n        });\n      });\n    }\n  }\n\n  public handleError(error?: string): void {\n    throw new Error(error);\n  }\n\n  public createActor = async <T>(idlFactory: InterfaceFactory, canisterId: string): Promise<ActorSubclass<T>> => {\n    if (this.#authClient.getConfirm() === true && canisterId !== undefined && canisterId !== '') {\n      await this._appendAuth(canisterId);\n    }\n    if (this.#connectOptions?.dev) {\n      await this.#agent?.fetchRootKey();\n    }\n    return Actor.createActor<T>(idlFactory, {\n      agent: this.#agent,\n      canisterId,\n    });\n  };\n\n  // requestTransfer\n  public requestTransfer = async (options: TransactionOptions): Promise<TransactionResponseSuccess | undefined | string> => {\n    const memo = options.sendOpts?.memo;\n    if (memo) {\n      const standard = options.standard.toUpperCase();\n      if (standard === 'EXT' && !Array.isArray(memo)) {\n        throw new Error('`sendOpts.memo` only supports `Array<number>` type when the standard is `EXT`');\n      }\n      if (standard === 'ICP' && typeof memo !== 'bigint') {\n        throw new Error('`sendOpts.memo` only supports `bigint` type when the standard is `ICP`');\n      }\n    }\n    console.assert(this.wallet !== undefined, 'wallet address is not found');\n    const walletProviderUrl = new URL(options?.walletProvider?.toString() || this.#walletProvider || WALLET_PROVIDER_DEFAULT);\n    walletProviderUrl.hash = WALLET_PROVIDER_ENDPOINT;\n    this._openWindow(walletProviderUrl.toString(), 'icWindow', this.#useFrame ? FRAME_SETTING_PAYMENT : undefined);\n\n    return new Promise((resolve, reject) => {\n      this._eventHandler = this._getEventHandler(walletProviderUrl, resolve, reject, options);\n      window.addEventListener('message', this._eventHandler);\n    });\n  };\n\n  public signMessage = async (options: SignerOptions): Promise<SignerResponseSuccess | undefined | string> => {\n    console.assert(this.wallet !== undefined, 'wallet address is not found');\n    const signerProviderUrl = new URL(options?.signerProvider?.toString() || this.#signerProvider || SIGNER_PROVIDER_DEFAULT);\n    signerProviderUrl.hash = SIGNER_PROVIDER_ENDPOINT;\n    this._openWindow(signerProviderUrl.toString(), 'icWindow', this.#useFrame ? FRAME_SETTING_PAYMENT : undefined);\n    return new Promise((resolve, reject) => {\n      this._eventHandler = this._getSignerHandler(signerProviderUrl, resolve, reject, options);\n      window.addEventListener('message', this._eventHandler);\n    });\n  };\n\n  private _getSignerHandler(\n    walletProviderUrl: URL,\n    resolve: (value: any) => void,\n    reject: (reason?: any) => void,\n    options: SignerOptions,\n  ): EventHandler {\n    return async (event: MessageEvent) => {\n      if (event.origin !== walletProviderUrl.origin) {\n        return;\n      }\n\n      const message = event.data as SignerResponseMessage;\n\n      switch (message.kind) {\n        case SignerMessageKind.ready: {\n          // IDP is ready. Send a message to request authorization.\n          const request: { kind: SignerMessageKind } & SignerOptions = {\n            kind: SignerMessageKind.client,\n            from: options.from ?? this.wallet!.accountId,\n            message: options.message,\n            maxTimeout: options.maxTimeout ?? 90,\n            successTimeout: options.successTimeout ?? 10,\n          };\n          this._window?.postMessage(request, walletProviderUrl.origin);\n          break;\n        }\n        case SignerMessageKind.success:\n          // Create the delegation chain and store it.\n          try {\n            resolve(this._handleSuccess(message, options.onSuccess, options.successTimeout ?? 10));\n          } catch (err) {\n            reject(this._handleFailure((err as Error).message, options.onError));\n          }\n          break;\n        case SignerMessageKind.fail:\n          reject(this._handleFailure((message as unknown as SignerResponseFailure).text, options.onError));\n          break;\n        default:\n          break;\n      }\n    };\n  }\n\n  private _getEventHandler(\n    walletProviderUrl: URL,\n    resolve: (value: any) => void,\n    reject: (reason?: any) => void,\n    options: TransactionOptions,\n  ): EventHandler {\n    return async (event: MessageEvent) => {\n      if (event.origin !== walletProviderUrl.origin) {\n        return;\n      }\n\n      const message = event.data as TransactionResponseMessage;\n\n      switch (message.kind) {\n        case TransactionMessageKind.ready: {\n          // IDP is ready. Send a message to request authorization.\n          const request: { kind: TransactionMessageKind } & { sendData: TransactionOptions } = {\n            kind: TransactionMessageKind.client,\n            sendData: {\n              ...options,\n            },\n          };\n          this._window?.postMessage(request, walletProviderUrl.origin);\n          break;\n        }\n        case TransactionMessageKind.success:\n          // Create the delegation chain and store it.\n          try {\n            resolve(this._handleSuccess(message, options.onSuccess, options.successTimeout ?? 10));\n          } catch (err) {\n            reject(this._handleFailure((err as Error).message, options.onError));\n          }\n          break;\n        case TransactionMessageKind.fail:\n          reject(this._handleFailure((message as unknown as TransactionResponseFailure).text, options.onError));\n          break;\n        default:\n          break;\n      }\n    };\n  }\n\n  private _handleFailure(errorMessage?: string, onError?: (error?: string) => void): string | undefined {\n    this._remove();\n    onError?.(errorMessage);\n    return errorMessage;\n  }\n\n  private _handleSuccess(\n    value?: TransactionResponseSuccess | SignerResponseSuccess,\n    onSuccess?: (value?: TransactionResponseSuccess | SignerResponseSuccess) => void,\n    delay?: number,\n  ): TransactionResponseSuccess | SignerResponseSuccess | undefined {\n    if (delay) {\n      setTimeout(() => this._remove(), delay * 1000);\n    } else {\n      this._remove();\n    }\n\n    onSuccess?.(value);\n    return value;\n  }\n}\n"],"names":["Actor","HttpAgent","AuthClient","IDENTITY_PROVIDER_DEFAULT","ICWindow","LedgerConnection","PermissionsType","SignerMessageKind","TransactionMessageKind","days","BigInt","hours","nanoseconds","WALLET_PROVIDER_DEFAULT","WALLET_PROVIDER_ENDPOINT","SIGNER_PROVIDER_DEFAULT","SIGNER_PROVIDER_ENDPOINT","targetsFilter","arr","filter","value","trim","FRAME_SETTING","FRAME_SETTING_PAYMENT","IC","authClient","agent","injectWindow","create","config","delegationTargets","Set","concat","ledgerCanisterId","whitelist","idpWindowOption","useFrame","undefined","identity","getIdentity","host","window","location","origin","dev","fetchRootKey","newIC","_setWalletProvider","walletProviderUrl","_setSignerProvider","signerProviderUrl","_setUseFrame","isAuthenticated","handleAuthenticated","ledgerHost","onAuthenticated","provider","identityProvider","_setConnectOptions","_setLoginOptions","maxTimeToLive","permissions","connect","connectOptions","delegationModes","length","modes","hasNotInclude","some","v","includes","Error","Promise","resolve","reject","getAuthClient","login","onSuccess","onError","handleError","result","principal","getPrincipal","wallet","getDelegateTargets","options","loginOption","disconnect","logout","queryBalance","getBalance","accountId","actorResult","createActor","getDelegationIdentity","createConnection","getInnerKey","actor","ic","astrox","_appendAuth","canisterId","currentTargets","newTargets","authType","error","idlFactory","getConfirm","requestTransfer","memo","sendOpts","standard","toUpperCase","Array","isArray","console","assert","URL","walletProvider","toString","hash","_openWindow","_eventHandler","_getEventHandler","addEventListener","signMessage","signerProvider","_getSignerHandler","event","message","data","kind","ready","request","client","from","maxTimeout","successTimeout","_window","postMessage","success","_handleSuccess","err","_handleFailure","fail","text","sendData","errorMessage","_remove","delay","setTimeout"],"mappings":"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"}