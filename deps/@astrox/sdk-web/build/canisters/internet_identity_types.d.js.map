{"version":3,"sources":["../../../src/canisters/internet_identity_types.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport type { Principal } from '@dfinity/principal';\nexport type CredentialId = Array<number>;\nexport interface Delegation {\n  pubkey: PublicKey;\n  targets: [] | [Array<Principal>];\n  expiration: Timestamp;\n}\nexport interface DeviceData {\n  alias: string;\n  pubkey: DeviceKey;\n  key_type: KeyType;\n  purpose: Purpose;\n  credential_id: [] | [CredentialId];\n}\nexport type DeviceKey = PublicKey;\nexport type FrontendHostname = string;\nexport type GetDelegationResponse = { no_such_delegation: null } | { signed_delegation: SignedDelegation };\nexport type HeaderField = [string, string];\nexport interface HttpRequest {\n  url: string;\n  method: string;\n  body: Array<number>;\n  headers: Array<HeaderField>;\n}\nexport interface HttpResponse {\n  body: Array<number>;\n  headers: Array<HeaderField>;\n  streaming_strategy: [] | [StreamingStrategy];\n  status_code: number;\n}\nexport interface InternetIdentityInit {\n  assigned_user_number_range: [bigint, bigint];\n}\nexport interface InternetIdentityStats {\n  users_registered: bigint;\n  assigned_user_number_range: [bigint, bigint];\n}\nexport type KeyType = { platform: null } | { seed_phrase: null } | { cross_platform: null } | { unknown: null };\nexport interface ProofOfWork {\n  nonce: bigint;\n  timestamp: Timestamp;\n}\nexport type PublicKey = Array<number>;\nexport type Purpose = { authentication: null } | { recovery: null };\nexport type RegisterResponse = { canister_full: null } | { registered: { user_number: UserNumber } };\nexport type SessionKey = PublicKey;\nexport interface SignedDelegation {\n  signature: Array<number>;\n  delegation: Delegation;\n}\nexport interface StreamingCallbackHttpResponse {\n  token: [] | [Token];\n  body: Array<number>;\n}\nexport type StreamingStrategy = {\n  Callback: { token: Token; callback: [Principal, string] };\n};\nexport type Timestamp = bigint;\nexport type Token = {};\nexport type UserKey = PublicKey;\nexport type UserNumber = bigint;\nexport default interface _SERVICE {\n  add: (arg_0: UserNumber, arg_1: DeviceData) => Promise<undefined>;\n  get_delegation: (arg_0: UserNumber, arg_1: FrontendHostname, arg_2: SessionKey, arg_3: Timestamp) => Promise<GetDelegationResponse>;\n  http_request: (arg_0: HttpRequest) => Promise<HttpResponse>;\n  init_salt: () => Promise<undefined>;\n  lookup: (arg_0: UserNumber) => Promise<Array<DeviceData>>;\n  prepare_delegation: (arg_0: UserNumber, arg_1: FrontendHostname, arg_2: SessionKey, arg_3: [] | [bigint]) => Promise<[UserKey, Timestamp]>;\n  register: (arg_0: DeviceData, arg_1: ProofOfWork) => Promise<RegisterResponse>;\n  remove: (arg_0: UserNumber, arg_1: DeviceKey) => Promise<undefined>;\n  stats: () => Promise<InternetIdentityStats>;\n}\n"],"names":[],"mappings":"AA8DA,WAUC"}