{"version":3,"sources":["../../../src/canisters/nns-dapp.d.ts"],"sourcesContent":["import type { Principal } from '@dfinity/principal';\nexport interface AccountDetails {\n  principal: Principal;\n  account_identifier: AccountIdentifier;\n  hardware_wallet_accounts: Array<HardwareWalletAccountDetails>;\n  sub_accounts: Array<SubAccountDetails>;\n}\nexport type AccountIdentifier = string;\nexport interface AttachCanisterRequest {\n  name: string;\n  canister_id: Principal;\n}\nexport type AttachCanisterResponse =\n  | { Ok: null }\n  | { CanisterAlreadyAttached: null }\n  | { NameAlreadyTaken: null }\n  | { NameTooLong: null }\n  | { CanisterLimitExceeded: null };\nexport type BlockHeight = bigint;\nexport interface CanisterDetails {\n  name: string;\n  canister_id: Principal;\n}\nexport type CanisterId = Principal;\nexport type CreateSubAccountResponse =\n  | { Ok: SubAccountDetails }\n  | { AccountNotFound: null }\n  | { NameTooLong: null }\n  | { SubAccountLimitExceeded: null };\nexport interface DetachCanisterRequest {\n  canister_id: Principal;\n}\nexport type DetachCanisterResponse = { Ok: null } | { CanisterNotFound: null };\nexport type GetAccountResponse = { Ok: AccountDetails } | { AccountNotFound: null };\nexport interface GetTransactionsRequest {\n  page_size: number;\n  offset: number;\n  account_identifier: AccountIdentifier;\n}\nexport interface GetTransactionsResponse {\n  total: number;\n  transactions: Array<Transaction>;\n}\nexport interface HardwareWalletAccountDetails {\n  principal: Principal;\n  name: string;\n  account_identifier: AccountIdentifier;\n}\nexport type HeaderField = [string, string];\nexport interface HttpRequest {\n  url: string;\n  method: string;\n  body: Array<number>;\n  headers: Array<HeaderField>;\n}\nexport interface HttpResponse {\n  body: Array<number>;\n  headers: Array<HeaderField>;\n  status_code: number;\n}\nexport interface ICPTs {\n  e8s: bigint;\n}\nexport type Memo = bigint;\nexport interface MultiPartTransactionError {\n  error_message: string;\n  block_height: BlockHeight;\n}\nexport type MultiPartTransactionStatus =\n  | { Queued: null }\n  | { Error: string }\n  | { Refunded: [BlockHeight, string] }\n  | { CanisterCreated: CanisterId }\n  | { Complete: null }\n  | { NotFound: null }\n  | { NeuronCreated: NeuronId }\n  | { PendingSync: null }\n  | { ErrorWithRefundPending: string };\nexport type NeuronId = bigint;\nexport interface Receive {\n  fee: ICPTs;\n  from: AccountIdentifier;\n  amount: ICPTs;\n}\nexport interface RegisterHardwareWalletRequest {\n  principal: Principal;\n  name: string;\n}\nexport type RegisterHardwareWalletResponse =\n  | { Ok: null }\n  | { AccountNotFound: null }\n  | { HardwareWalletAlreadyRegistered: null }\n  | { HardwareWalletLimitExceeded: null }\n  | { NameTooLong: null };\nexport interface RenameSubAccountRequest {\n  new_name: string;\n  account_identifier: AccountIdentifier;\n}\nexport type RenameSubAccountResponse = { Ok: null } | { AccountNotFound: null } | { SubAccountNotFound: null } | { NameTooLong: null };\nexport interface Send {\n  to: AccountIdentifier;\n  fee: ICPTs;\n  amount: ICPTs;\n}\nexport interface Stats {\n  latest_transaction_block_height: BlockHeight;\n  seconds_since_last_ledger_sync: bigint;\n  sub_accounts_count: bigint;\n  neurons_topped_up_count: bigint;\n  transactions_to_process_queue_length: number;\n  neurons_created_count: bigint;\n  hardware_wallet_accounts_count: bigint;\n  accounts_count: bigint;\n  earliest_transaction_block_height: BlockHeight;\n  transactions_count: bigint;\n  block_height_synced_up_to: [] | [bigint];\n  latest_transaction_timestamp_nanos: bigint;\n  earliest_transaction_timestamp_nanos: bigint;\n}\nexport type SubAccount = Array<number>;\nexport interface SubAccountDetails {\n  name: string;\n  sub_account: SubAccount;\n  account_identifier: AccountIdentifier;\n}\nexport interface Timestamp {\n  timestamp_nanos: bigint;\n}\nexport interface Transaction {\n  transaction_type: [] | [TransactionType];\n  memo: bigint;\n  timestamp: Timestamp;\n  block_height: BlockHeight;\n  transfer: Transfer;\n}\nexport type TransactionType =\n  | { Burn: null }\n  | { Mint: null }\n  | { Send: null }\n  | { StakeNeuronNotification: null }\n  | { TopUpCanister: CanisterId }\n  | { CreateCanister: null }\n  | { TopUpNeuron: null }\n  | { StakeNeuron: null };\nexport type Transfer = { Burn: { amount: ICPTs } } | { Mint: { amount: ICPTs } } | { Send: Send } | { Receive: Receive };\nexport default interface _SERVICE {\n  add_account: () => Promise<AccountIdentifier>;\n  add_stable_asset: (arg_0: Array<number>) => Promise<undefined>;\n  attach_canister: (arg_0: AttachCanisterRequest) => Promise<AttachCanisterResponse>;\n  create_sub_account: (arg_0: string) => Promise<CreateSubAccountResponse>;\n  detach_canister: (arg_0: DetachCanisterRequest) => Promise<DetachCanisterResponse>;\n  get_account: () => Promise<GetAccountResponse>;\n  get_canisters: () => Promise<Array<CanisterDetails>>;\n  get_icp_to_cycles_conversion_rate: () => Promise<bigint>;\n  get_multi_part_transaction_errors: () => Promise<Array<MultiPartTransactionError>>;\n  get_multi_part_transaction_status: (arg_0: Principal, arg_1: BlockHeight) => Promise<MultiPartTransactionStatus>;\n  get_stats: () => Promise<Stats>;\n  get_transactions: (arg_0: GetTransactionsRequest) => Promise<GetTransactionsResponse>;\n  http_request: (arg_0: HttpRequest) => Promise<HttpResponse>;\n  register_hardware_wallet: (arg_0: RegisterHardwareWalletRequest) => Promise<RegisterHardwareWalletResponse>;\n  rename_sub_account: (arg_0: RenameSubAccountRequest) => Promise<RenameSubAccountResponse>;\n}\n"],"names":[],"mappings":"AAiJA,WAgBC"}