{"version":3,"sources":["../../../src/canisters/nns-dapp.idl.ts"],"sourcesContent":["export default ({ IDL }: { IDL: any }) => {\n  const AccountIdentifier = IDL.Text;\n  const AttachCanisterRequest = IDL.Record({\n    name: IDL.Text,\n    canister_id: IDL.Principal,\n  });\n  const AttachCanisterResponse = IDL.Variant({\n    Ok: IDL.Null,\n    CanisterAlreadyAttached: IDL.Null,\n    NameAlreadyTaken: IDL.Null,\n    NameTooLong: IDL.Null,\n    CanisterLimitExceeded: IDL.Null,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const SubAccountDetails = IDL.Record({\n    name: IDL.Text,\n    sub_account: SubAccount,\n    account_identifier: AccountIdentifier,\n  });\n  const CreateSubAccountResponse = IDL.Variant({\n    Ok: SubAccountDetails,\n    AccountNotFound: IDL.Null,\n    NameTooLong: IDL.Null,\n    SubAccountLimitExceeded: IDL.Null,\n  });\n  const DetachCanisterRequest = IDL.Record({ canister_id: IDL.Principal });\n  const DetachCanisterResponse = IDL.Variant({\n    Ok: IDL.Null,\n    CanisterNotFound: IDL.Null,\n  });\n  const HardwareWalletAccountDetails = IDL.Record({\n    principal: IDL.Principal,\n    name: IDL.Text,\n    account_identifier: AccountIdentifier,\n  });\n  const AccountDetails = IDL.Record({\n    principal: IDL.Principal,\n    account_identifier: AccountIdentifier,\n    hardware_wallet_accounts: IDL.Vec(HardwareWalletAccountDetails),\n    sub_accounts: IDL.Vec(SubAccountDetails),\n  });\n  const GetAccountResponse = IDL.Variant({\n    Ok: AccountDetails,\n    AccountNotFound: IDL.Null,\n  });\n  const CanisterDetails = IDL.Record({\n    name: IDL.Text,\n    canister_id: IDL.Principal,\n  });\n  const BlockHeight = IDL.Nat64;\n  const MultiPartTransactionError = IDL.Record({\n    error_message: IDL.Text,\n    block_height: BlockHeight,\n  });\n  const CanisterId = IDL.Principal;\n  const NeuronId = IDL.Nat64;\n  const MultiPartTransactionStatus = IDL.Variant({\n    Queued: IDL.Null,\n    Error: IDL.Text,\n    Refunded: IDL.Tuple(BlockHeight, IDL.Text),\n    CanisterCreated: CanisterId,\n    Complete: IDL.Null,\n    NotFound: IDL.Null,\n    NeuronCreated: NeuronId,\n    PendingSync: IDL.Null,\n    ErrorWithRefundPending: IDL.Text,\n  });\n  const Stats = IDL.Record({\n    latest_transaction_block_height: BlockHeight,\n    seconds_since_last_ledger_sync: IDL.Nat64,\n    sub_accounts_count: IDL.Nat64,\n    neurons_topped_up_count: IDL.Nat64,\n    transactions_to_process_queue_length: IDL.Nat32,\n    neurons_created_count: IDL.Nat64,\n    hardware_wallet_accounts_count: IDL.Nat64,\n    accounts_count: IDL.Nat64,\n    earliest_transaction_block_height: BlockHeight,\n    transactions_count: IDL.Nat64,\n    block_height_synced_up_to: IDL.Opt(IDL.Nat64),\n    latest_transaction_timestamp_nanos: IDL.Nat64,\n    earliest_transaction_timestamp_nanos: IDL.Nat64,\n  });\n  const GetTransactionsRequest = IDL.Record({\n    page_size: IDL.Nat8,\n    offset: IDL.Nat32,\n    account_identifier: AccountIdentifier,\n  });\n  const TransactionType = IDL.Variant({\n    Burn: IDL.Null,\n    Mint: IDL.Null,\n    Send: IDL.Null,\n    StakeNeuronNotification: IDL.Null,\n    TopUpCanister: CanisterId,\n    CreateCanister: IDL.Null,\n    TopUpNeuron: IDL.Null,\n    StakeNeuron: IDL.Null,\n  });\n  const Timestamp = IDL.Record({ timestamp_nanos: IDL.Nat64 });\n  const ICPTs = IDL.Record({ e8s: IDL.Nat64 });\n  const Send = IDL.Record({\n    to: AccountIdentifier,\n    fee: ICPTs,\n    amount: ICPTs,\n  });\n  const Receive = IDL.Record({\n    fee: ICPTs,\n    from: AccountIdentifier,\n    amount: ICPTs,\n  });\n  const Transfer = IDL.Variant({\n    Burn: IDL.Record({ amount: ICPTs }),\n    Mint: IDL.Record({ amount: ICPTs }),\n    Send: Send,\n    Receive: Receive,\n  });\n  const Transaction = IDL.Record({\n    transaction_type: IDL.Opt(TransactionType),\n    memo: IDL.Nat64,\n    timestamp: Timestamp,\n    block_height: BlockHeight,\n    transfer: Transfer,\n  });\n  const GetTransactionsResponse = IDL.Record({\n    total: IDL.Nat32,\n    transactions: IDL.Vec(Transaction),\n  });\n  const HeaderField = IDL.Tuple(IDL.Text, IDL.Text);\n  const HttpRequest = IDL.Record({\n    url: IDL.Text,\n    method: IDL.Text,\n    body: IDL.Vec(IDL.Nat8),\n    headers: IDL.Vec(HeaderField),\n  });\n  const HttpResponse = IDL.Record({\n    body: IDL.Vec(IDL.Nat8),\n    headers: IDL.Vec(HeaderField),\n    status_code: IDL.Nat16,\n  });\n  const RegisterHardwareWalletRequest = IDL.Record({\n    principal: IDL.Principal,\n    name: IDL.Text,\n  });\n  const RegisterHardwareWalletResponse = IDL.Variant({\n    Ok: IDL.Null,\n    AccountNotFound: IDL.Null,\n    HardwareWalletAlreadyRegistered: IDL.Null,\n    HardwareWalletLimitExceeded: IDL.Null,\n    NameTooLong: IDL.Null,\n  });\n  const RenameSubAccountRequest = IDL.Record({\n    new_name: IDL.Text,\n    account_identifier: AccountIdentifier,\n  });\n  const RenameSubAccountResponse = IDL.Variant({\n    Ok: IDL.Null,\n    AccountNotFound: IDL.Null,\n    SubAccountNotFound: IDL.Null,\n    NameTooLong: IDL.Null,\n  });\n  return IDL.Service({\n    add_account: IDL.Func([], [AccountIdentifier], []),\n    add_stable_asset: IDL.Func([IDL.Vec(IDL.Nat8)], [], []),\n    attach_canister: IDL.Func([AttachCanisterRequest], [AttachCanisterResponse], []),\n    create_sub_account: IDL.Func([IDL.Text], [CreateSubAccountResponse], []),\n    detach_canister: IDL.Func([DetachCanisterRequest], [DetachCanisterResponse], []),\n    get_account: IDL.Func([], [GetAccountResponse], ['query']),\n    get_canisters: IDL.Func([], [IDL.Vec(CanisterDetails)], ['query']),\n    get_icp_to_cycles_conversion_rate: IDL.Func([], [IDL.Nat64], ['query']),\n    get_multi_part_transaction_errors: IDL.Func([], [IDL.Vec(MultiPartTransactionError)], ['query']),\n    get_multi_part_transaction_status: IDL.Func([IDL.Principal, BlockHeight], [MultiPartTransactionStatus], ['query']),\n    get_stats: IDL.Func([], [Stats], ['query']),\n    get_transactions: IDL.Func([GetTransactionsRequest], [GetTransactionsResponse], ['query']),\n    http_request: IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    register_hardware_wallet: IDL.Func([RegisterHardwareWalletRequest], [RegisterHardwareWalletResponse], []),\n    rename_sub_account: IDL.Func([RenameSubAccountRequest], [RenameSubAccountResponse], []),\n  });\n};\nexport const init = ({ IDL }: { IDL: any }) => {\n  return [];\n};\n"],"names":["IDL","AccountIdentifier","Text","AttachCanisterRequest","Record","name","canister_id","Principal","AttachCanisterResponse","Variant","Ok","Null","CanisterAlreadyAttached","NameAlreadyTaken","NameTooLong","CanisterLimitExceeded","SubAccount","Vec","Nat8","SubAccountDetails","sub_account","account_identifier","CreateSubAccountResponse","AccountNotFound","SubAccountLimitExceeded","DetachCanisterRequest","DetachCanisterResponse","CanisterNotFound","HardwareWalletAccountDetails","principal","AccountDetails","hardware_wallet_accounts","sub_accounts","GetAccountResponse","CanisterDetails","BlockHeight","Nat64","MultiPartTransactionError","error_message","block_height","CanisterId","NeuronId","MultiPartTransactionStatus","Queued","Error","Refunded","Tuple","CanisterCreated","Complete","NotFound","NeuronCreated","PendingSync","ErrorWithRefundPending","Stats","latest_transaction_block_height","seconds_since_last_ledger_sync","sub_accounts_count","neurons_topped_up_count","transactions_to_process_queue_length","Nat32","neurons_created_count","hardware_wallet_accounts_count","accounts_count","earliest_transaction_block_height","transactions_count","block_height_synced_up_to","Opt","latest_transaction_timestamp_nanos","earliest_transaction_timestamp_nanos","GetTransactionsRequest","page_size","offset","TransactionType","Burn","Mint","Send","StakeNeuronNotification","TopUpCanister","CreateCanister","TopUpNeuron","StakeNeuron","Timestamp","timestamp_nanos","ICPTs","e8s","to","fee","amount","Receive","from","Transfer","Transaction","transaction_type","memo","timestamp","transfer","GetTransactionsResponse","total","transactions","HeaderField","HttpRequest","url","method","body","headers","HttpResponse","status_code","Nat16","RegisterHardwareWalletRequest","RegisterHardwareWalletResponse","HardwareWalletAlreadyRegistered","HardwareWalletLimitExceeded","RenameSubAccountRequest","new_name","RenameSubAccountResponse","SubAccountNotFound","Service","add_account","Func","add_stable_asset","attach_canister","create_sub_account","detach_canister","get_account","get_canisters","get_icp_to_cycles_conversion_rate","get_multi_part_transaction_errors","get_multi_part_transaction_status","get_stats","get_transactions","http_request","register_hardware_wallet","rename_sub_account","init"],"mappings":"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"}