{"version":3,"sources":["../../../src/canisters/me.idl.ts"],"sourcesContent":["export default ({ IDL }: { IDL: any }) => {\n  const DeviceType = IDL.Variant({\n    IdentityProvider: IDL.Null,\n    SecurityDevice: IDL.Null,\n    EthereumMetaMask: IDL.Null,\n  });\n  const Purpose = IDL.Variant({\n    authentication: IDL.Null,\n    recovery: IDL.Null,\n  });\n  const CredentialId = IDL.Vec(IDL.Nat8);\n  const DeviceDataExternal = IDL.Record({\n    device_name: IDL.Text,\n    device_type: DeviceType,\n    pub_key: IDL.Text,\n    purpose: Purpose,\n    credential_id: IDL.Opt(CredentialId),\n  });\n  const DeviceAddResponse = IDL.Variant({\n    added: IDL.Record({ user_name: IDL.Text }),\n    failed: IDL.Null,\n  });\n  const PublicKey = IDL.Vec(IDL.Nat8);\n  const SessionKey = PublicKey;\n  const Timestamp = IDL.Nat64;\n  const Delegation = IDL.Record({\n    pubkey: PublicKey,\n    targets: IDL.Opt(IDL.Vec(IDL.Principal)),\n    expiration: Timestamp,\n  });\n  const SignedDelegation = IDL.Record({\n    signature: IDL.Vec(IDL.Nat8),\n    delegation: Delegation,\n  });\n  const GetDelegationResponse = IDL.Variant({\n    no_such_delegation: IDL.Null,\n    signed_delegation: SignedDelegation,\n  });\n  const UserKey = PublicKey;\n  const GetDelegationResponseQr = IDL.Record({\n    user_key: UserKey,\n    extra: IDL.Text,\n    get_delegation_response: GetDelegationResponse,\n  });\n  const AccountIdentifier = IDL.Text;\n  const HardwareWalletAccountDetails = IDL.Record({\n    principal: IDL.Principal,\n    name: IDL.Text,\n    account_identifier: AccountIdentifier,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const SubAccountDetails = IDL.Record({\n    name: IDL.Text,\n    sub_account: SubAccount,\n    account_identifier: AccountIdentifier,\n  });\n  const AccountDetails = IDL.Record({\n    principal: IDL.Principal,\n    account_identifier: AccountIdentifier,\n    hardware_wallet_accounts: IDL.Vec(HardwareWalletAccountDetails),\n    sub_accounts: IDL.Vec(SubAccountDetails),\n  });\n  const AccountDetailsResult = IDL.Record({\n    account_details: IDL.Opt(AccountDetails),\n    anchor_number: IDL.Text,\n  });\n  const RoleType = IDL.Variant({ Sub: IDL.Null, Main: IDL.Null });\n  const DeviceKey = PublicKey;\n  const DeviceData = IDL.Record({\n    device_name: IDL.Text,\n    device_type: DeviceType,\n    pub_key: DeviceKey,\n    purpose: Purpose,\n    credential_id: IDL.Opt(CredentialId),\n  });\n  const Profile = IDL.Record({\n    user_name: IDL.Text,\n    role_type: RoleType,\n    devices: IDL.Vec(DeviceData),\n  });\n  const IPProfile = IDL.Record({\n    user_name: IDL.Text,\n    role_type: RoleType,\n    devices: IDL.Vec(DeviceData),\n  });\n  const RegisterResponse = IDL.Variant({\n    canister_full: IDL.Null,\n    registered: IDL.Record({ user_name: IDL.Text }),\n  });\n  const DeviceRemoveResponse = IDL.Variant({\n    failed: IDL.Null,\n    removed: IDL.Null,\n  });\n  const UpdateNNSWalletResponse = IDL.Variant({\n    success: IDL.Null,\n    failed: IDL.Null,\n  });\n  return IDL.Service({\n    add_ii_anchor_number: IDL.Func([IDL.Text, DeviceType, IDL.Text], [IDL.Vec(IDL.Text)], []),\n    add_new_device: IDL.Func([DeviceDataExternal, IDL.Text, DeviceType], [DeviceAddResponse], []),\n    get_delegation: IDL.Func([IDL.Text, DeviceType, IDL.Text, SessionKey, Timestamp], [GetDelegationResponse], ['query']),\n    get_delegation_qr: IDL.Func([IDL.Text], [IDL.Opt(GetDelegationResponseQr)], ['query']),\n    get_ii_anchor_number_by_name: IDL.Func([IDL.Text], [IDL.Vec(IDL.Text)], ['query']),\n    get_nns_wallets: IDL.Func([IDL.Text, IDL.Opt(IDL.Text)], [IDL.Vec(AccountDetailsResult)], ['query']),\n    get_profile_by_name: IDL.Func([IDL.Text], [IDL.Opt(Profile), IDL.Vec(Profile), IDL.Vec(IPProfile)], ['query']),\n    prepare_delegation: IDL.Func([IDL.Text, DeviceType, IDL.Text, SessionKey, IDL.Opt(IDL.Nat64)], [UserKey, Timestamp], []),\n    prepare_delegation_qr: IDL.Func([IDL.Text, IDL.Text, DeviceType, IDL.Text, SessionKey, IDL.Opt(IDL.Nat64), IDL.Text], [UserKey, Timestamp], []),\n    register_user_main: IDL.Func([IDL.Text, DeviceDataExternal], [RegisterResponse], []),\n    unbind_device: IDL.Func([IDL.Text, IDL.Text, DeviceType], [DeviceRemoveResponse], []),\n    update_nns_wallets: IDL.Func([IDL.Text, DeviceType, IDL.Text, AccountDetails], [UpdateNNSWalletResponse], []),\n  });\n};\nexport const init = ({ IDL }: { IDL: any }) => {\n  return [];\n};\n"],"names":["IDL","DeviceType","Variant","IdentityProvider","Null","SecurityDevice","EthereumMetaMask","Purpose","authentication","recovery","CredentialId","Vec","Nat8","DeviceDataExternal","Record","device_name","Text","device_type","pub_key","purpose","credential_id","Opt","DeviceAddResponse","added","user_name","failed","PublicKey","SessionKey","Timestamp","Nat64","Delegation","pubkey","targets","Principal","expiration","SignedDelegation","signature","delegation","GetDelegationResponse","no_such_delegation","signed_delegation","UserKey","GetDelegationResponseQr","user_key","extra","get_delegation_response","AccountIdentifier","HardwareWalletAccountDetails","principal","name","account_identifier","SubAccount","SubAccountDetails","sub_account","AccountDetails","hardware_wallet_accounts","sub_accounts","AccountDetailsResult","account_details","anchor_number","RoleType","Sub","Main","DeviceKey","DeviceData","Profile","role_type","devices","IPProfile","RegisterResponse","canister_full","registered","DeviceRemoveResponse","removed","UpdateNNSWalletResponse","success","Service","add_ii_anchor_number","Func","add_new_device","get_delegation","get_delegation_qr","get_ii_anchor_number_by_name","get_nns_wallets","get_profile_by_name","prepare_delegation","prepare_delegation_qr","register_user_main","unbind_device","update_nns_wallets","init"],"mappings":"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"}