{"version":3,"sources":["../../../src/connections/nnsConnection.d.ts"],"sourcesContent":["import { ActorSubclass, HttpAgent, SignIdentity } from '@dfinity/agent';\nimport { DelegationIdentity } from '@dfinity/identity';\nimport { BaseConnection } from './baseConnection';\nimport NNS_SERVICE, { AccountDetails, AccountIdentifier, GetTransactionsResponse } from '../canisters/nns-dapp';\nimport { CreateActorResult } from '../types';\nexport declare class NNSConnection extends BaseConnection<NNS_SERVICE> {\n    identity: SignIdentity;\n    delegationIdentity: DelegationIdentity;\n    actor?: ActorSubclass<NNS_SERVICE> | undefined;\n    agent?: HttpAgent | undefined;\n    get accountDetails(): AccountDetails | undefined;\n    private _accountDetails?;\n    protected constructor(identity: SignIdentity, delegationIdentity: DelegationIdentity, actor?: ActorSubclass<NNS_SERVICE> | undefined, agent?: HttpAgent | undefined, nnsCanisterId?: string);\n    /**\n     * create connection\n     * @param identity\n     * @param delegationIdentity\n     * @param actor\n     * @param agent\n     * @function createConnection\n     * @returns {NNSConnection}\n     */\n    static createConnection(identity: SignIdentity, delegationIdentity: DelegationIdentity, actor?: ActorSubclass<NNS_SERVICE>, agent?: HttpAgent): NNSConnection;\n    /**\n     * create Actor with DelegationIdentity\n     * @param delegationIdentity\n     * @param nnsCanisterId\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    static createActor(delegationIdentity: DelegationIdentity, nnsCanisterId?: string): Promise<CreateActorResult<NNS_SERVICE>>;\n    static getTransactions({ nnsActor, delegationIdentity, }: {\n        nnsActor?: ActorSubclass<NNS_SERVICE>;\n        delegationIdentity?: DelegationIdentity;\n    }, { page_size, offset, account_identifier, }: {\n        page_size: number;\n        offset: number;\n        account_identifier: AccountIdentifier;\n    }): Promise<GetTransactionsResponse>;\n    /**\n     * get NNS Actor, used internally\n     * @param nnsCanisterId\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    getNNSActor(nnsCanisterId?: string): Promise<ActorSubclass<NNS_SERVICE>>;\n    /**\n     * get NNS Actor, used internally\n     * @param nnsCanisterId\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    getNNSActorCert(nnsCanisterId?: string): Promise<ActorSubclass<NNS_SERVICE>>;\n    /**\n     * when NNSConnection is created, we can get account created to NNS.\n     * Even we can just calculate the login principal to NNS DApp, however,\n     * The NNS DApp stores and create account, thus, a new Identity login will get NO ACCOUNT created by default.\n     * We need to manually create account using `add_account` when no account found.\n     *\n     * @param cert\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    getAccount(cert?: boolean): Promise<AccountDetails | undefined>;\n    /**\n     * create account when new identity logined to NNS\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    addAccount(): Promise<string>;\n}\n"],"names":["BaseConnection"],"mappings":"AAEA,SAASA,cAAc,QAAQ,mBAAmB"}