{"version":3,"sources":["../../../src/connections/baseConnection.d.ts"],"sourcesContent":["import { ActorSubclass, HttpAgent, SignIdentity } from '@dfinity/agent';\nimport { InterfaceFactory } from '@dfinity/candid/lib/cjs/idl';\nimport { DelegationIdentity } from '@dfinity/identity';\nimport { AbstractConnection, CreateActorResult, DelegationMessage, HandleDelegationResult } from '../types';\nexport declare function createConnection<T>(identity: SignIdentity, delegationIdentity: DelegationIdentity, canisterId: string, interfaceFactory: InterfaceFactory, actor?: ActorSubclass<T>, agent?: HttpAgent): BaseConnection<T>;\nexport declare const requestDelegation: (identity: SignIdentity, { canisterId, date }: {\n    canisterId?: string | undefined;\n    date?: Date | undefined;\n}) => Promise<DelegationIdentity>;\nexport declare function _createActor<T>(interfaceFactory: InterfaceFactory, canisterId: string, identity?: SignIdentity, host?: string): Promise<CreateActorResult<T>>;\nexport declare class BaseConnection<T> implements AbstractConnection<T> {\n    identity: SignIdentity;\n    delegationIdentity: DelegationIdentity;\n    canisterId: string;\n    interfaceFactory: InterfaceFactory;\n    actor?: ActorSubclass<T> | undefined;\n    agent?: HttpAgent | undefined;\n    constructor(identity: SignIdentity, delegationIdentity: DelegationIdentity, canisterId: string, interfaceFactory: InterfaceFactory, actor?: ActorSubclass<T> | undefined, agent?: HttpAgent | undefined);\n    getActor(): Promise<ActorSubclass<T>>;\n    protected _getActor(canisterId: string, interfaceFactory: InterfaceFactory, date?: Date): Promise<ActorSubclass<T>>;\n}\nexport declare function handleDelegation(message: DelegationMessage, key: SignIdentity): Promise<HandleDelegationResult>;\nexport declare const executeWithLogging: <T>(func: () => Promise<T>) => Promise<T>;\n"],"names":[],"mappings":"AAsBA,WAAmF"}