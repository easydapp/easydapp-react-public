{"version":3,"sources":["../../../src/connections/ledgerConnection.d.ts"],"sourcesContent":["import { BaseConnection } from './baseConnection';\nimport LEDGER_SERVICE, { AccountIdentifier, BlockHeight, SendArgs } from '../canisters/ledger';\nimport { ActorSubclass, HttpAgent, SignIdentity } from '@dfinity/agent';\nimport { DelegationIdentity } from '@dfinity/identity';\nimport { CreateActorResult, SendOpts } from '../types';\nexport interface TransactionResponse {\n    blockHeight: bigint;\n    sendArgs: SendArgs;\n}\nexport declare class LedgerConnection extends BaseConnection<LEDGER_SERVICE> {\n    identity: SignIdentity;\n    delegationIdentity: DelegationIdentity;\n    actor?: ActorSubclass<LEDGER_SERVICE> | undefined;\n    agent?: HttpAgent | undefined;\n    protected constructor(identity: SignIdentity, delegationIdentity: DelegationIdentity, actor?: ActorSubclass<LEDGER_SERVICE> | undefined, agent?: HttpAgent | undefined, legerCanisterId?: string);\n    /**\n     * create connection\n     * @param identity\n     * @param delegationIdentity\n     * @param legerCanisterId\n     * @param actor\n     * @param agent\n     * @function createConnection\n     * @returns {LedgerConnection}\n     */\n    static createConnection(identity: SignIdentity, delegationIdentity: DelegationIdentity, legerCanisterId?: string, actor?: ActorSubclass<LEDGER_SERVICE>, agent?: HttpAgent): LedgerConnection;\n    /**\n     * create Actor with DelegationIdentity\n     * @param delegationIdentity\n     * @param canisterId\n     * @param ledgerCanisterId\n     * @param host\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    static createActor(delegationIdentity: DelegationIdentity, ledgerCanisterId?: string, host?: string): Promise<CreateActorResult<LEDGER_SERVICE>>;\n    static createConnectionWithII(identity: SignIdentity, delegationIdentity: DelegationIdentity, legerCanisterId?: string): Promise<LedgerConnection>;\n    static actorGetBalance(actor: ActorSubclass<LEDGER_SERVICE>, account: AccountIdentifier): Promise<bigint>;\n    static actorSend(actor: ActorSubclass<LEDGER_SERVICE>, { to, amount, sendOpts, }: {\n        to: AccountIdentifier;\n        amount: bigint;\n        sendOpts?: SendOpts;\n    }): Promise<BlockHeight>;\n    /**\n     * get NNS Actor, used internally\n     * @param canisterId\n     * @param ledgerCanisterId\n     * @function {function name}\n     * @returns {type} {description}\n     */\n    getLedgerActor(ledgerCanisterId?: string): Promise<ActorSubclass<LEDGER_SERVICE>>;\n    getBalance(account: AccountIdentifier): Promise<bigint>;\n    send({ to, amount, sendOpts }: {\n        to: AccountIdentifier;\n        amount: bigint;\n        sendOpts: SendOpts;\n    }): Promise<BlockHeight>;\n}\n"],"names":["BaseConnection"],"mappings":"AAAA,SAASA,cAAc,QAAQ,mBAAmB"}