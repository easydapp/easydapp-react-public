{"version":3,"sources":["../../../src/connections/ledgerConnection.ts"],"sourcesContent":["import { BaseConnection, executeWithLogging, _createActor } from './baseConnection';\nimport ledger_idl from '../canisters/ledger.idl';\nimport LEDGER_SERVICE, { AccountIdentifier, BlockHeight, Memo, SendArgs, SubAccount, TimeStamp } from '../canisters/ledger';\nimport { ActorSubclass, HttpAgent, SignIdentity } from '@dfinity/agent';\nimport { DelegationIdentity } from '@dfinity/identity';\nimport { fromSubAccountId } from '../utils/converter';\nimport { LEDGER_CANISTER_ID } from '../utils/constants';\nimport { CreateActorResult, SendOpts } from '../types';\n\n// export const canisterIdPrincipal: Principal = Principal.fromText(LEDGER_CANISTER_ID);\nexport interface TransactionResponse {\n  blockHeight: bigint;\n  sendArgs: SendArgs;\n}\n\nexport class LedgerConnection extends BaseConnection<LEDGER_SERVICE> {\n  protected constructor(\n    public identity: SignIdentity,\n    public delegationIdentity: DelegationIdentity,\n    public actor?: ActorSubclass<LEDGER_SERVICE>,\n    public agent?: HttpAgent,\n    legerCanisterId?: string,\n  ) {\n    super(identity, delegationIdentity, legerCanisterId ?? LEDGER_CANISTER_ID, ledger_idl, actor, agent);\n  }\n\n  /**\n   * create connection\n   * @param identity\n   * @param delegationIdentity\n   * @param legerCanisterId\n   * @param actor\n   * @param agent\n   * @function createConnection\n   * @returns {LedgerConnection}\n   */\n  static createConnection(\n    identity: SignIdentity,\n    delegationIdentity: DelegationIdentity,\n    legerCanisterId?: string,\n    actor?: ActorSubclass<LEDGER_SERVICE>,\n    agent?: HttpAgent,\n  ): LedgerConnection {\n    return new LedgerConnection(identity, delegationIdentity, actor, agent, legerCanisterId ?? LEDGER_CANISTER_ID);\n  }\n\n  /**\n   * create Actor with DelegationIdentity\n   * @param delegationIdentity\n   * @param canisterId\n   * @param ledgerCanisterId\n   * @param host\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  static async createActor(\n    delegationIdentity: DelegationIdentity,\n    ledgerCanisterId?: string,\n    host?: string,\n  ): Promise<CreateActorResult<LEDGER_SERVICE>> {\n    const actor = await _createActor<LEDGER_SERVICE>(ledger_idl, ledgerCanisterId ?? LEDGER_CANISTER_ID, delegationIdentity, host);\n    return actor;\n  }\n\n  static async createConnectionWithII(\n    identity: SignIdentity,\n    delegationIdentity: DelegationIdentity,\n    legerCanisterId?: string,\n  ): Promise<LedgerConnection> {\n    const actorResult = await LedgerConnection.createActor(delegationIdentity);\n    return LedgerConnection.createConnection(\n      identity,\n      delegationIdentity,\n      legerCanisterId ?? LEDGER_CANISTER_ID,\n      actorResult.actor,\n      actorResult.agent,\n    );\n  }\n\n  static async actorGetBalance(actor: ActorSubclass<LEDGER_SERVICE>, account: AccountIdentifier): Promise<bigint> {\n    const response = await executeWithLogging(() => actor.account_balance_dfx({ account }));\n    return response.e8s;\n  }\n\n  static async actorSend(\n    actor: ActorSubclass<LEDGER_SERVICE>,\n    {\n      to,\n      amount,\n      sendOpts,\n    }: {\n      to: AccountIdentifier;\n      amount: bigint;\n      sendOpts?: SendOpts;\n    },\n  ): Promise<BlockHeight> {\n    const response = await executeWithLogging(() => {\n      const defaultFee = BigInt(10000);\n      const defaultMemo = BigInt(Math.floor(Math.random() * 10000));\n      const subAccount = sendOpts?.from_subaccount === undefined ? ([] as []) : (Array.from<SubAccount>([sendOpts?.from_subaccount]) as [SubAccount]);\n\n      const createAtTime =\n        sendOpts?.created_at_time === undefined\n          ? ([] as [])\n          : (Array.from<TimeStamp>([\n              {\n                timestamp_nanos: BigInt(sendOpts?.created_at_time?.getTime()),\n              },\n            ]) as [TimeStamp]);\n\n      const sendArgs = {\n        to: to,\n        fee: {\n          e8s: sendOpts?.fee ?? defaultFee,\n        },\n        amount: { e8s: amount },\n        memo: sendOpts?.memo as bigint ?? defaultMemo,\n        from_subaccount: subAccount,\n\n        created_at_time: createAtTime,\n      };\n\n      return actor.send_dfx(sendArgs);\n    });\n    return response;\n  }\n\n  /**\n   * get NNS Actor, used internally\n   * @param canisterId\n   * @param ledgerCanisterId\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  async getLedgerActor(ledgerCanisterId?: string): Promise<ActorSubclass<LEDGER_SERVICE>> {\n    const actor = await this._getActor(ledgerCanisterId ?? LEDGER_CANISTER_ID, ledger_idl);\n    return actor;\n  }\n\n  async getBalance(account: AccountIdentifier): Promise<bigint> {\n    const actor = await this.getLedgerActor();\n    const response = await executeWithLogging(() => actor.account_balance_dfx({ account }));\n    return response.e8s;\n  }\n\n  async send({ to, amount, sendOpts }: { to: AccountIdentifier; amount: bigint; sendOpts: SendOpts }): Promise<BlockHeight> {\n    const actor = await this.getLedgerActor();\n    const response = await executeWithLogging(() => {\n      const defaultFee = BigInt(10000);\n      const defaultMemo = BigInt(Math.floor(Math.random() * 10000));\n      const subAccount = sendOpts?.from_subaccount === undefined ? ([] as []) : (Array.from<SubAccount>([sendOpts?.from_subaccount]) as [SubAccount]);\n\n      const createAtTime =\n        sendOpts?.created_at_time === undefined\n          ? ([] as [])\n          : (Array.from<TimeStamp>([\n              {\n                timestamp_nanos: BigInt(sendOpts?.created_at_time?.getTime()),\n              },\n            ]) as [TimeStamp]);\n\n      const sendArgs = {\n        to: to,\n        fee: {\n          e8s: sendOpts?.fee ?? defaultFee,\n        },\n        amount: { e8s: amount },\n        memo: sendOpts?.memo as bigint ?? defaultMemo,\n        from_subaccount: subAccount,\n\n        created_at_time: createAtTime,\n      };\n\n      return actor.send_dfx(sendArgs);\n    });\n    return response;\n  }\n}\n\n// export const requestNNSDelegation = async (\n//   identity: SignIdentity,\n// ): Promise<DelegationIdentity> => {\n//   const tenMinutesInMsec = 10 * 1000 * 60;\n//   const date = new Date(Date.now() + tenMinutesInMsec);\n//   return requestDelegation(identity, { canisterId, date });\n// };\n"],"names":["BaseConnection","executeWithLogging","_createActor","ledger_idl","LEDGER_CANISTER_ID","LedgerConnection","identity","delegationIdentity","actor","agent","legerCanisterId","createConnection","createActor","ledgerCanisterId","host","createConnectionWithII","actorResult","actorGetBalance","account","response","account_balance_dfx","e8s","actorSend","to","amount","sendOpts","defaultFee","BigInt","defaultMemo","Math","floor","random","subAccount","from_subaccount","undefined","Array","from","createAtTime","created_at_time","timestamp_nanos","getTime","sendArgs","fee","memo","send_dfx","getLedgerActor","_getActor","getBalance","send"],"mappings":"AAAA,SAASA,cAAc,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,mBAAmB;AACpF,OAAOC,gBAAgB,0BAA0B;AAKjD,SAASC,kBAAkB,QAAQ,qBAAqB;AASxD,OAAO,MAAMC,yBAAyBL;;;;;IACpC,YACE,AAAOM,QAAsB,EAC7B,AAAOC,kBAAsC,EAC7C,AAAOC,KAAqC,EAC5C,AAAOC,KAAiB,EACxBC,eAAwB,CACxB;QACA,KAAK,CAACJ,UAAUC,oBAAoBG,mBAAmBN,oBAAoBD,YAAYK,OAAOC,aANvFH,WAAAA,eACAC,qBAAAA,yBACAC,QAAAA,YACAC,QAAAA;IAIT;IAYA,OAAOE,iBACLL,QAAsB,EACtBC,kBAAsC,EACtCG,eAAwB,EACxBF,KAAqC,EACrCC,KAAiB,EACC;QAClB,OAAO,IAAIJ,iBAAiBC,UAAUC,oBAAoBC,OAAOC,OAAOC,mBAAmBN;IAC7F;IAWA,aAAaQ,YACXL,kBAAsC,EACtCM,gBAAyB,EACzBC,IAAa,EAC+B;QAC5C,MAAMN,QAAQ,MAAMN,aAA6BC,YAAYU,oBAAoBT,oBAAoBG,oBAAoBO;QACzH,OAAON;IACT;IAEA,aAAaO,uBACXT,QAAsB,EACtBC,kBAAsC,EACtCG,eAAwB,EACG;QAC3B,MAAMM,cAAc,MAAMX,iBAAiBO,WAAW,CAACL;QACvD,OAAOF,iBAAiBM,gBAAgB,CACtCL,UACAC,oBACAG,mBAAmBN,oBACnBY,YAAYR,KAAK,EACjBQ,YAAYP,KAAK;IAErB;IAEA,aAAaQ,gBAAgBT,KAAoC,EAAEU,OAA0B,EAAmB;QAC9G,MAAMC,WAAW,MAAMlB,mBAAmB,IAAMO,MAAMY,mBAAmB,CAAC;gBAAEF;YAAQ;QACpF,OAAOC,SAASE,GAAG;IACrB;IAEA,aAAaC,UACXd,KAAoC,EACpC,EACEe,EAAE,EACFC,MAAM,EACNC,QAAQ,EAKT,EACqB;QACtB,MAAMN,WAAW,MAAMlB,mBAAmB;YACxC,MAAMyB,aAAaC,OAAO;YAC1B,MAAMC,cAAcD,OAAOE,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK;YACtD,MAAMC,aAAaP,UAAUQ,oBAAoBC,YAAa,EAAE,GAAWC,MAAMC,IAAI,CAAa;gBAACX,UAAUQ;aAAgB;YAE7H,MAAMI,eACJZ,UAAUa,oBAAoBJ,YACzB,EAAE,GACFC,MAAMC,IAAI,CAAY;gBACrB;oBACEG,iBAAiBZ,OAAOF,UAAUa,iBAAiBE;gBACrD;aACD;YAEP,MAAMC,WAAW;gBACflB,IAAIA;gBACJmB,KAAK;oBACHrB,KAAKI,UAAUiB,OAAOhB;gBACxB;gBACAF,QAAQ;oBAAEH,KAAKG;gBAAO;gBACtBmB,MAAMlB,UAAUkB,QAAkBf;gBAClCK,iBAAiBD;gBAEjBM,iBAAiBD;YACnB;YAEA,OAAO7B,MAAMoC,QAAQ,CAACH;QACxB;QACA,OAAOtB;IACT;IASA,MAAM0B,eAAehC,gBAAyB,EAA0C;QACtF,MAAML,QAAQ,MAAM,IAAI,CAACsC,SAAS,CAACjC,oBAAoBT,oBAAoBD;QAC3E,OAAOK;IACT;IAEA,MAAMuC,WAAW7B,OAA0B,EAAmB;QAC5D,MAAMV,QAAQ,MAAM,IAAI,CAACqC,cAAc;QACvC,MAAM1B,WAAW,MAAMlB,mBAAmB,IAAMO,MAAMY,mBAAmB,CAAC;gBAAEF;YAAQ;QACpF,OAAOC,SAASE,GAAG;IACrB;IAEA,MAAM2B,KAAK,EAAEzB,EAAE,EAAEC,MAAM,EAAEC,QAAQ,EAAiE,EAAwB;QACxH,MAAMjB,QAAQ,MAAM,IAAI,CAACqC,cAAc;QACvC,MAAM1B,WAAW,MAAMlB,mBAAmB;YACxC,MAAMyB,aAAaC,OAAO;YAC1B,MAAMC,cAAcD,OAAOE,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK;YACtD,MAAMC,aAAaP,UAAUQ,oBAAoBC,YAAa,EAAE,GAAWC,MAAMC,IAAI,CAAa;gBAACX,UAAUQ;aAAgB;YAE7H,MAAMI,eACJZ,UAAUa,oBAAoBJ,YACzB,EAAE,GACFC,MAAMC,IAAI,CAAY;gBACrB;oBACEG,iBAAiBZ,OAAOF,UAAUa,iBAAiBE;gBACrD;aACD;YAEP,MAAMC,WAAW;gBACflB,IAAIA;gBACJmB,KAAK;oBACHrB,KAAKI,UAAUiB,OAAOhB;gBACxB;gBACAF,QAAQ;oBAAEH,KAAKG;gBAAO;gBACtBmB,MAAMlB,UAAUkB,QAAkBf;gBAClCK,iBAAiBD;gBAEjBM,iBAAiBD;YACnB;YAEA,OAAO7B,MAAMoC,QAAQ,CAACH;QACxB;QACA,OAAOtB;IACT;AACF"}