{"version":3,"sources":["../../../src/connections/nnsConnection.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  ActorSubclass,\n  DerEncodedPublicKey,\n  HttpAgent,\n  Signature,\n  SignIdentity,\n} from '@dfinity/agent';\nimport { DelegationIdentity } from '@dfinity/identity';\n\nimport { BaseConnection, executeWithLogging, _createActor } from './baseConnection';\nimport nns_idl from '../canisters/nns-dapp.idl';\nimport nns_idl_cert from '../canisters/nns-dapp-cert.idl';\nimport NNS_SERVICE, {\n  AccountDetails,\n  AccountIdentifier,\n  GetTransactionsResponse,\n} from '../canisters/nns-dapp';\nimport { NNS_CANISTER_ID } from '../utils/constants';\nimport { CreateActorResult } from '../types';\n\nexport class NNSConnection extends BaseConnection<NNS_SERVICE> {\n  public get accountDetails(): AccountDetails | undefined {\n    return this._accountDetails;\n  }\n\n  private _accountDetails?: AccountDetails;\n\n  protected constructor(\n    public identity: SignIdentity,\n    public delegationIdentity: DelegationIdentity,\n    public actor?: ActorSubclass<NNS_SERVICE>,\n    public agent?: HttpAgent,\n    nnsCanisterId?: string,\n  ) {\n    super(identity, delegationIdentity, nnsCanisterId ?? NNS_CANISTER_ID, nns_idl, actor, agent);\n  }\n\n  /**\n   * create connection\n   * @param identity\n   * @param delegationIdentity\n   * @param actor\n   * @param agent\n   * @function createConnection\n   * @returns {NNSConnection}\n   */\n  static createConnection(\n    identity: SignIdentity,\n    delegationIdentity: DelegationIdentity,\n    actor?: ActorSubclass<NNS_SERVICE>,\n    agent?: HttpAgent,\n  ): NNSConnection {\n    return new NNSConnection(identity, delegationIdentity, actor, agent);\n  }\n\n  /**\n   * create Actor with DelegationIdentity\n   * @param delegationIdentity\n   * @param nnsCanisterId\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  static async createActor(\n    delegationIdentity: DelegationIdentity,\n    nnsCanisterId?: string,\n  ): Promise<CreateActorResult<NNS_SERVICE>> {\n    const actor = await _createActor<NNS_SERVICE>(\n      nns_idl,\n      nnsCanisterId ?? NNS_CANISTER_ID,\n      delegationIdentity,\n    );\n    return actor;\n  }\n\n  static async getTransactions(\n    {\n      nnsActor,\n      delegationIdentity,\n    }: {\n      nnsActor?: ActorSubclass<NNS_SERVICE>;\n      delegationIdentity?: DelegationIdentity;\n    },\n\n    {\n      page_size,\n      offset,\n      account_identifier,\n    }: {\n      page_size: number;\n      offset: number;\n      account_identifier: AccountIdentifier;\n    },\n  ): Promise<GetTransactionsResponse> {\n    const actor: ActorSubclass<NNS_SERVICE> =\n      nnsActor ?? (await NNSConnection.createActor(delegationIdentity!)).actor;\n    const result = await actor.get_transactions({\n      page_size,\n      offset,\n      account_identifier,\n    });\n    return result;\n  }\n\n  /**\n   * get NNS Actor, used internally\n   * @param nnsCanisterId\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  async getNNSActor(nnsCanisterId?: string): Promise<ActorSubclass<NNS_SERVICE>> {\n    const actor = await this._getActor(nnsCanisterId ?? NNS_CANISTER_ID, nns_idl);\n    return actor;\n  }\n\n  /**\n   * get NNS Actor, used internally\n   * @param nnsCanisterId\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  async getNNSActorCert(nnsCanisterId?: string): Promise<ActorSubclass<NNS_SERVICE>> {\n    const actor = await this._getActor(nnsCanisterId ?? NNS_CANISTER_ID, nns_idl_cert);\n    return actor;\n  }\n\n  /**\n   * when NNSConnection is created, we can get account created to NNS.\n   * Even we can just calculate the login principal to NNS DApp, however,\n   * The NNS DApp stores and create account, thus, a new Identity login will get NO ACCOUNT created by default.\n   * We need to manually create account using `add_account` when no account found.\n   *\n   * @param cert\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  async getAccount(cert?: boolean): Promise<AccountDetails | undefined> {\n    const actor = cert === true ? await this.getNNSActorCert() : await this.getNNSActor();\n    const response = await executeWithLogging(() => actor.get_account());\n    this._accountDetails = (response as { Ok: AccountDetails })['Ok'] as AccountDetails;\n    return (response as { Ok: AccountDetails })['Ok'] as AccountDetails;\n  }\n\n  /**\n   * create account when new identity logined to NNS\n   * @function {function name}\n   * @returns {type} {description}\n   */\n  async addAccount(): Promise<string> {\n    const actor = await this.getNNSActor();\n    const response = await executeWithLogging(() => actor.add_account());\n    return response;\n  }\n}\n\n// export const requestNNSDelegation = async (\n//   identity: SignIdentity,\n// ): Promise<DelegationIdentity> => {\n//   const tenMinutesInMsec = 10 * 1000 * 60;\n//   const date = new Date(Date.now() + tenMinutesInMsec);\n//   return requestDelegation(identity, { canisterId, date });\n// };\n"],"names":["BaseConnection","executeWithLogging","_createActor","nns_idl","nns_idl_cert","NNS_CANISTER_ID","NNSConnection","accountDetails","_accountDetails","identity","delegationIdentity","actor","agent","nnsCanisterId","createConnection","createActor","getTransactions","nnsActor","page_size","offset","account_identifier","result","get_transactions","getNNSActor","_getActor","getNNSActorCert","getAccount","cert","response","get_account","addAccount","add_account"],"mappings":"AAWA,SAASA,cAAc,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,mBAAmB;AACpF,OAAOC,aAAa,4BAA4B;AAChD,OAAOC,kBAAkB,iCAAiC;AAM1D,SAASC,eAAe,QAAQ,qBAAqB;AAGrD,OAAO,MAAMC,sBAAsBN;;;;;IACjC,IAAWO,iBAA6C;QACtD,OAAO,IAAI,CAACC,eAAe;IAC7B;IAEQA,gBAAiC;IAEzC,YACE,AAAOC,QAAsB,EAC7B,AAAOC,kBAAsC,EAC7C,AAAOC,KAAkC,EACzC,AAAOC,KAAiB,EACxBC,aAAsB,CACtB;QACA,KAAK,CAACJ,UAAUC,oBAAoBG,iBAAiBR,iBAAiBF,SAASQ,OAAOC,aAN/EH,WAAAA,eACAC,qBAAAA,yBACAC,QAAAA,YACAC,QAAAA;IAIT;IAWA,OAAOE,iBACLL,QAAsB,EACtBC,kBAAsC,EACtCC,KAAkC,EAClCC,KAAiB,EACF;QACf,OAAO,IAAIN,cAAcG,UAAUC,oBAAoBC,OAAOC;IAChE;IASA,aAAaG,YACXL,kBAAsC,EACtCG,aAAsB,EACmB;QACzC,MAAMF,QAAQ,MAAMT,aAClBC,SACAU,iBAAiBR,iBACjBK;QAEF,OAAOC;IACT;IAEA,aAAaK,gBACX,EACEC,QAAQ,EACRP,kBAAkB,EAInB,EAED,EACEQ,SAAS,EACTC,MAAM,EACNC,kBAAkB,EAKnB,EACiC;QAClC,MAAMT,QACJM,YAAY,AAAC,CAAA,MAAMX,cAAcS,WAAW,CAACL,mBAAmB,EAAGC,KAAK;QAC1E,MAAMU,SAAS,MAAMV,MAAMW,gBAAgB,CAAC;YAC1CJ;YACAC;YACAC;QACF;QACA,OAAOC;IACT;IAQA,MAAME,YAAYV,aAAsB,EAAuC;QAC7E,MAAMF,QAAQ,MAAM,IAAI,CAACa,SAAS,CAACX,iBAAiBR,iBAAiBF;QACrE,OAAOQ;IACT;IAQA,MAAMc,gBAAgBZ,aAAsB,EAAuC;QACjF,MAAMF,QAAQ,MAAM,IAAI,CAACa,SAAS,CAACX,iBAAiBR,iBAAiBD;QACrE,OAAOO;IACT;IAYA,MAAMe,WAAWC,IAAc,EAAuC;QACpE,MAAMhB,QAAQgB,SAAS,OAAO,MAAM,IAAI,CAACF,eAAe,KAAK,MAAM,IAAI,CAACF,WAAW;QACnF,MAAMK,WAAW,MAAM3B,mBAAmB,IAAMU,MAAMkB,WAAW;QACjE,IAAI,CAACrB,eAAe,GAAG,AAACoB,QAAmC,CAAC,KAAK;QACjE,OAAO,AAACA,QAAmC,CAAC,KAAK;IACnD;IAOA,MAAME,aAA8B;QAClC,MAAMnB,QAAQ,MAAM,IAAI,CAACY,WAAW;QACpC,MAAMK,WAAW,MAAM3B,mBAAmB,IAAMU,MAAMoB,WAAW;QACjE,OAAOH;IACT;AACF"}