{"version":3,"sources":["../../../../src/services/history/rosseta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-useless-catch */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { DelegationIdentity } from '@dfinity/identity';\nimport fetch from 'cross-fetch';\n// import {\n//   GetTransactionsResponse,\n//   Send,\n//   Timestamp,\n// } from 'src/frontend/generated/nns-dapp';\nimport { NET_ID, ROSETTA_URL } from '../../utils/constants';\nimport { formatAssetBySymbol, parseBalance, TokenSymbol } from '../../utils/converter';\nimport { TransactionResponse } from '../../connections/ledgerConnection';\nimport { NNSConnection as nns } from '../../connections/nnsConnection';\nimport { GetTransactionsResponse, Send, Timestamp } from '../../canisters/nns-dapp';\n\nexport const MILI_PER_SECOND = 1_000_000;\n\ninterface Operation {\n  account: {\n    address: string;\n  };\n  amount: {\n    value: string;\n    currency: {\n      symbol: string;\n      decimals: number;\n    };\n  };\n  status: RosettaTransactionStatus;\n  type: RosettaTransactionType;\n}\n\nexport enum RosettaTransactionStatus {\n  COMPLETED = 'COMPLETED',\n  REVERTED = 'REVERTED',\n  PENDING = 'PENDING',\n}\n\nexport enum RosettaTransactionType {\n  TRANSACTION = 'TRANSACTION',\n  FEE = 'FEE',\n  RECEIVE = 'RECEIVE',\n  SEND = 'SEND',\n}\n\nexport interface Currency {\n  symbol: string;\n  decimals: number;\n}\n\ninterface RosettaTransaction {\n  metadata: {\n    block_height: number;\n    memo: number;\n    timestamp: bigint;\n    lockTime: number;\n  };\n  operations: Operation[];\n  transaction_identifier: { hash: string };\n}\n\nexport interface InnerUsedTransactionDetail {\n  to?: string;\n  from: string;\n  status?: RosettaTransactionStatus;\n  amount?: string;\n  currency?: {\n    symbol: string;\n    decimals: number;\n  };\n  fee: {\n    amount?: string;\n    currency?: {\n      symbol: string;\n      decimals: number;\n    };\n  };\n}\n\nexport interface InnerUsedTransaction {\n  type: RosettaTransactionType;\n  details: InnerUsedTransactionDetail;\n}\n\nexport interface InferredTransaction {\n  hash: string;\n  timestamp: string;\n  type: RosettaTransactionType;\n  details: InnerUsedTransactionDetail;\n  caller: string;\n  block_height: string;\n  memo: string;\n  lockTime: string;\n}\n\nexport interface GetRossetaTransactionsResponse {\n  total: number;\n  transactions: InferredTransaction[];\n}\n\nconst getTransactionInfo = (accountId: string, rosettaTransaction: RosettaTransaction): InferredTransaction => {\n  const {\n    operations,\n    metadata: { timestamp: ts, block_height: bh, memo: mm, lockTime: lt },\n    transaction_identifier: { hash },\n  } = rosettaTransaction;\n  // console.log('------ getting rosetta transaction start  -------');\n  // console.log({ rosettaTransaction });\n  // console.log('------ getting rosetta transaction end  -------');\n\n  const transaction: InnerUsedTransaction = {\n    type: RosettaTransactionType.SEND,\n    details: {\n      status: RosettaTransactionStatus.COMPLETED,\n      fee: {},\n      from: accountId,\n    },\n  };\n\n  operations.forEach(operation => {\n    const value = BigInt(operation.amount.value);\n    const { decimals } = operation.amount.currency;\n    const amount = parseBalance({ value: value.toString(), decimals });\n    if (operation.type === RosettaTransactionType.FEE) {\n      transaction.details.fee.amount = amount;\n      transaction.details.fee.currency = operation.amount.currency;\n      return;\n    }\n\n    if (value >= 0) transaction.details.to = operation.account.address;\n    if (value <= 0) transaction.details.from = operation.account.address;\n\n    if (transaction.details.status === RosettaTransactionStatus.COMPLETED && operation.status !== RosettaTransactionStatus.COMPLETED)\n      transaction.details.status = operation.status;\n\n    transaction.type = transaction.details.to === accountId ? RosettaTransactionType.RECEIVE : RosettaTransactionType.SEND;\n    transaction.details.amount = amount;\n    transaction.details.currency = operation.amount.currency;\n  });\n\n  return {\n    ...transaction,\n    caller: transaction.details.from,\n    hash,\n    timestamp: ts !== undefined ? (BigInt(ts) / BigInt(MILI_PER_SECOND)).toString() : '',\n    block_height: bh !== undefined ? BigInt(bh).toString() : '',\n    memo: mm !== undefined ? BigInt(mm).toString() : '',\n    lockTime: lt !== undefined ? BigInt(lt).toString() : '',\n  };\n};\n\nexport const getICPTransactions = async (accountId: string): Promise<GetRossetaTransactionsResponse> => {\n  const response = await fetch(`${ROSETTA_URL}/search/transactions`, {\n    method: 'POST',\n    body: JSON.stringify({\n      network_identifier: NET_ID,\n      account_identifier: {\n        address: accountId,\n      },\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: '*/*',\n    },\n  });\n  if (!response.ok) throw Error(`GET_TRANSACTIONS_FAILS: ${response.statusText}`);\n  const { transactions, total_count } = await response.json();\n  const transactionsInfo = transactions.map(({ transaction }: { transaction: any }) => getTransactionInfo(accountId, transaction));\n  return {\n    total: total_count,\n    transactions: transactionsInfo,\n  };\n};\n\nexport const getTransactions = async (localDelegationIdentity: DelegationIdentity, fromAccount: string): Promise<GetTransactionsResponse> => {\n  const result = await nns.getTransactions(\n    { delegationIdentity: localDelegationIdentity },\n    { page_size: 10, offset: 0, account_identifier: fromAccount },\n  );\n  return result;\n};\n\nexport const getICPTransactionsByBlock = async (fromAccount: string, blockHeight: bigint) => {\n  try {\n    const response = await fetch(`${ROSETTA_URL}/block`, {\n      method: 'POST',\n      body: JSON.stringify({\n        network_identifier: NET_ID,\n        block_identifier: { index: parseInt(blockHeight.toString()) },\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: '*/*',\n      },\n    });\n    if (!response.ok) throw Error(`GET_TRANSACTIONS_FAILS: ${response.statusText}`);\n    const { block } = await response.json();\n    const { transactions } = block;\n    if (transactions === undefined || block === undefined) {\n      return {\n        total: transactions.length,\n        transactions: [],\n      };\n    }\n    const transactionsInfo = transactions.map((transaction: RosettaTransaction) => getTransactionInfo(fromAccount, transaction));\n    return {\n      total: transactions.length,\n      transactions: transactionsInfo,\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getExactTransaction = (\n  fromAccount: string,\n  singleResponse: TransactionResponse,\n  txns: GetTransactionsResponse,\n): InferredTransaction | undefined => {\n  const { sendArgs } = singleResponse;\n  const { amount, created_at_time, memo, to } = sendArgs;\n  const { blockHeight } = singleResponse;\n  const { transactions } = txns;\n\n  console.log({ singleResponse, txns });\n\n  const found = transactions.find(val => {\n    return created_at_time[0] !== undefined\n      ? (val.timestamp as Timestamp).timestamp_nanos > (created_at_time[0] as Timestamp).timestamp_nanos\n      : true &&\n          val.block_height === blockHeight &&\n          val.memo === memo &&\n          JSON.stringify(val.transaction_type[0]) === JSON.stringify({ Send: null }) &&\n          (val.transfer as { Send: Send }).Send.amount.e8s === amount.e8s &&\n          (val.transfer as { Send: Send }).Send.to === to;\n  });\n  if (found) {\n    const res = {\n      hash: '',\n      timestamp: (BigInt((found.timestamp as Timestamp).timestamp_nanos) / BigInt(1000000)).toString(),\n      type: RosettaTransactionType.SEND,\n      details: {\n        to,\n        from: fromAccount,\n        status: RosettaTransactionStatus.COMPLETED,\n        amount: amount.e8s.toString(),\n        currency: {\n          symbol: TokenSymbol.ICP,\n          decimals: 10,\n        },\n        fee: {\n          amount: (found.transfer as { Send: Send }).Send.fee.e8s.toString(),\n          currency: {\n            symbol: TokenSymbol.ICP,\n            decimals: 10,\n          },\n        },\n      },\n      caller: fromAccount,\n      block_height: blockHeight.toString(),\n      memo: memo.toString(),\n      lockTime: '',\n    };\n    return res;\n  }\n\n  return undefined;\n};\n\n// use Rosseta API to fetch transaction list, and return\n// This API works on mainnet, however not in local testnet\nexport const getTransactionFromRosseta = (\n  fromAccount: string,\n  singleResponse: TransactionResponse,\n  txns: GetRossetaTransactionsResponse,\n): InferredTransaction | undefined => {\n  const { sendArgs } = singleResponse;\n  const { amount, created_at_time, memo, to } = sendArgs;\n  const { blockHeight } = singleResponse;\n  const { transactions } = txns;\n\n  const found = transactions.find(val => {\n    return created_at_time[0] !== undefined\n      ? val.timestamp.length < (created_at_time[0] as Timestamp).timestamp_nanos.toString().length\n        ? BigInt(val.timestamp) * BigInt(1000000) > (created_at_time[0] as Timestamp).timestamp_nanos\n        : BigInt(val.timestamp) > (created_at_time[0] as Timestamp).timestamp_nanos\n      : true &&\n          BigInt(val.block_height) === blockHeight &&\n          BigInt(val.memo) === memo &&\n          val.details.to === to &&\n          val.details.amount === formatAssetBySymbol(amount.e8s, val.details.currency!.symbol)?.amount.toString() &&\n          val.caller === fromAccount;\n  });\n  return found;\n};\n"],"names":["fetch","NET_ID","ROSETTA_URL","formatAssetBySymbol","parseBalance","TokenSymbol","NNSConnection","nns","MILI_PER_SECOND","RosettaTransactionStatus","RosettaTransactionType","getTransactionInfo","accountId","rosettaTransaction","operations","metadata","timestamp","ts","block_height","bh","memo","mm","lockTime","lt","transaction_identifier","hash","transaction","type","details","status","fee","from","forEach","operation","value","BigInt","amount","decimals","currency","toString","to","account","address","caller","undefined","getICPTransactions","response","method","body","JSON","stringify","network_identifier","account_identifier","headers","Accept","ok","Error","statusText","transactions","total_count","json","transactionsInfo","map","total","getTransactions","localDelegationIdentity","fromAccount","result","delegationIdentity","page_size","offset","getICPTransactionsByBlock","blockHeight","block_identifier","index","parseInt","block","length","error","getExactTransaction","singleResponse","txns","sendArgs","created_at_time","console","log","found","find","val","timestamp_nanos","transaction_type","Send","transfer","e8s","res","symbol","ICP","getTransactionFromRosseta"],"mappings":"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"}