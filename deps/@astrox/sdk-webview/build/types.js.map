{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["import { BaseConnectResponse, TransferNFTWithIdentifier, TransferToken, Wallet } from '@astrox/sdk-core';\nimport { JsonnableDelegationChain } from '@dfinity/identity';\n\nexport interface WebViewConnectResponse extends BaseConnectResponse {\n  cacheKey: string;\n  chain?: JsonnableDelegationChain;\n  wallet?: Wallet;\n  confirm?: boolean;\n}\n\nexport type DelegationMode = 'global' | 'domain';\n\nexport interface WebViewConnectRequest {\n  delegationTargets?: Array<string>;\n  noUnify?: boolean;\n  host: string;\n  customDomain?: string;\n  delegationModes?: Array<DelegationMode>;\n}\n\nexport interface BalanceResponseObject {\n  amount: number;\n  canisterId: string;\n  decimals: number;\n  image?: string;\n  name: string;\n  symbol: string;\n}\n\nexport interface WebViewAuthResponse {\n  authorized: boolean;\n  payload?: WebViewConnectResponse;\n}\n\nexport interface SupportedToken {\n  decimals: number;\n  fee: bigint;\n  name: string;\n  symbol: string;\n  standard: string;\n  canisterId: string;\n}\n\nexport interface BaseBridgeErrorResponse {\n  kind: string;\n  text: string;\n}\n\n// Transaction Types\nexport enum TransactionMessageKind {\n  success = 'transaction-client-success',\n  fail = 'transaction-client-failure',\n}\n\nexport enum TransactionType {\n  token = 'token',\n  nft = 'nft',\n}\n\nexport interface TransactionResponseFailure {\n  kind: TransactionMessageKind.fail | string;\n  text: string;\n}\n\nexport interface TokenTransferResponse {\n  blockHeight?: bigint;\n  amount?: string;\n  transactionId?: string;\n  originPayload: TransferToken;\n}\n\nexport interface NFTTransferResponse {\n  success: true;\n  originPayload: TransferNFTWithIdentifier;\n}\n\nexport interface TransactionResponseSuccess {\n  kind: TransactionMessageKind.success | string;\n  type: TransactionType | string;\n  payload?: TokenTransferResponse | NFTTransferResponse;\n}\n\nexport type TransactionResponse = TransactionResponseSuccess | TransactionResponseFailure;\n\nexport type NetworkState = 'bluetooth' | 'wifi' | 'ethernet' | 'mobile' | 'none' | 'vpn' | null;\nexport type Brightness = 'dark' | 'light';\n\nexport interface Screen {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface Device {\n  model?: string;\n  uuid?: string;\n  osName?: string;\n  osVersion?: string;\n}\n\nexport interface InitInfo {\n  devicePixelRatio: number;\n  screen: Screen;\n  brightness: Brightness;\n  device: Device;\n  networkState?: NetworkState;\n}\n"],"names":["TransactionMessageKind","TransactionType"],"mappings":"AAiDA,OAAO,IAAA,AAAKA,gDAAAA;;;WAAAA;MAGX;AAED,OAAO,IAAA,AAAKC,yCAAAA;;;WAAAA;MAGX"}