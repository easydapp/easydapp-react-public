{"version":3,"sources":["../../src/errors.ts"],"sourcesContent":["import { BaseBridgeErrorResponse } from './types';\n\nexport class BridgeErrors {\n  static bridgeUnknownError = 50000;\n  static bridgeIllegalArguments = 50001;\n  static bridgeIllegalState = 50002;\n  static bridgeUnsupportedError = 50003;\n  static bridgeIdentityNotFound = 50004;\n  static bridgeIdentityExpired = 50005;\n  static bridgeWalletNotFound = 50006;\n  static bridgeOperationCancelled = 50007;\n  static bridgeNFTIdentifierError = 50008;\n  static bridgeUnknownMethod = 50009;\n  static defaultErrorKind = 'JS-SDK-Error';\n  static defaultErrorMessage = 'No More Detail';\n\n  static fromErrorCode(\n    code: number,\n    kind: string = BridgeErrors.defaultErrorKind,\n    message: string = BridgeErrors.defaultErrorMessage,\n  ): BaseBridgeErrorResponse {\n    const defaultReturn = {\n      kind,\n      text: 'Unknown Error',\n    };\n    switch (code) {\n      case BridgeErrors.bridgeUnknownError:\n        return { kind, text: `Unknown Error: ${message}` };\n      case BridgeErrors.bridgeIllegalArguments:\n        return { kind, text: `Illegal Arguments: ${message}` };\n      case BridgeErrors.bridgeIllegalState:\n        return { kind, text: `Illegal State: ${message}` };\n      case BridgeErrors.bridgeUnsupportedError:\n        return { kind, text: `Unsupported Error: ${message}` };\n      case BridgeErrors.bridgeIdentityNotFound:\n        return { kind, text: `Identity Not Found: ${message}` };\n      case BridgeErrors.bridgeIdentityExpired:\n        return { kind, text: `Identity Expired: ${message}` };\n      case BridgeErrors.bridgeWalletNotFound:\n        return { kind, text: `Wallet Not Found: ${message}` };\n      case BridgeErrors.bridgeOperationCancelled:\n        return { kind, text: `Operation Cancelled: ${message}` };\n      case BridgeErrors.bridgeNFTIdentifierError:\n        return { kind, text: `NFT Identifier Error: ${message}` };\n      case BridgeErrors.bridgeUnknownMethod:\n        return { kind, text: `Unknown method: ${message}` };\n      default:\n        return defaultReturn;\n    }\n  }\n}\n"],"names":["BridgeErrors","fromErrorCode","code","kind","defaultErrorKind","message","defaultErrorMessage","defaultReturn","text","bridgeUnknownError","bridgeIllegalArguments","bridgeIllegalState","bridgeUnsupportedError","bridgeIdentityNotFound","bridgeIdentityExpired","bridgeWalletNotFound","bridgeOperationCancelled","bridgeNFTIdentifierError","bridgeUnknownMethod"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,IAAA,AAAMA,6BAAN;;aAAMA;gCAAAA;;kBAAAA;;YAcJC,KAAAA;mBAAP,SAAOA,cACLC,IAAY;oBACZC,OAAAA,iEAAeH,AAhBNA,aAgBmBI,gBAAgB,EAC5CC,UAAAA,iEAAkBL,AAjBTA,aAiBsBM,mBAAmB;gBAElD,IAAMC,gBAAgB;oBACpBJ,MAAAA;oBACAK,MAAM;gBACR;gBACA,OAAQN;oBACN,KAAKF,AAxBEA,aAwBWS,kBAAkB;wBAClC,OAAO;4BAAEN,MAAAA;4BAAMK,MAAM,AAAC,kBAAyB,OAARH;wBAAU;oBACnD,KAAKL,AA1BEA,aA0BWU,sBAAsB;wBACtC,OAAO;4BAAEP,MAAAA;4BAAMK,MAAM,AAAC,sBAA6B,OAARH;wBAAU;oBACvD,KAAKL,AA5BEA,aA4BWW,kBAAkB;wBAClC,OAAO;4BAAER,MAAAA;4BAAMK,MAAM,AAAC,kBAAyB,OAARH;wBAAU;oBACnD,KAAKL,AA9BEA,aA8BWY,sBAAsB;wBACtC,OAAO;4BAAET,MAAAA;4BAAMK,MAAM,AAAC,sBAA6B,OAARH;wBAAU;oBACvD,KAAKL,AAhCEA,aAgCWa,sBAAsB;wBACtC,OAAO;4BAAEV,MAAAA;4BAAMK,MAAM,AAAC,uBAA8B,OAARH;wBAAU;oBACxD,KAAKL,AAlCEA,aAkCWc,qBAAqB;wBACrC,OAAO;4BAAEX,MAAAA;4BAAMK,MAAM,AAAC,qBAA4B,OAARH;wBAAU;oBACtD,KAAKL,AApCEA,aAoCWe,oBAAoB;wBACpC,OAAO;4BAAEZ,MAAAA;4BAAMK,MAAM,AAAC,qBAA4B,OAARH;wBAAU;oBACtD,KAAKL,AAtCEA,aAsCWgB,wBAAwB;wBACxC,OAAO;4BAAEb,MAAAA;4BAAMK,MAAM,AAAC,wBAA+B,OAARH;wBAAU;oBACzD,KAAKL,AAxCEA,aAwCWiB,wBAAwB;wBACxC,OAAO;4BAAEd,MAAAA;4BAAMK,MAAM,AAAC,yBAAgC,OAARH;wBAAU;oBAC1D,KAAKL,AA1CEA,aA0CWkB,mBAAmB;wBACnC,OAAO;4BAAEf,MAAAA;4BAAMK,MAAM,AAAC,mBAA0B,OAARH;wBAAU;oBACpD;wBACE,OAAOE;gBACX;YACF;;;WA/CWP;IAgDZ;AA/CC,iBADWA,cACJS,sBAAqB;AAC5B,iBAFWT,cAEJU,0BAAyB;AAChC,iBAHWV,cAGJW,sBAAqB;AAC5B,iBAJWX,cAIJY,0BAAyB;AAChC,iBALWZ,cAKJa,0BAAyB;AAChC,iBANWb,cAMJc,yBAAwB;AAC/B,iBAPWd,cAOJe,wBAAuB;AAC9B,iBARWf,cAQJgB,4BAA2B;AAClC,iBATWhB,cASJiB,4BAA2B;AAClC,iBAVWjB,cAUJkB,uBAAsB;AAC7B,iBAXWlB,cAWJI,oBAAmB;AAC1B,iBAZWJ,cAYJM,uBAAsB"}