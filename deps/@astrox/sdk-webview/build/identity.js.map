{"version":3,"sources":["../../src/identity.ts"],"sourcesContent":["import { HttpAgentRequest, PublicKey, requestIdOf, Signature, SignIdentity } from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\nimport { fromHexString, toHexString } from '@astrox/sdk-webview-bridge';\nimport * as _ms from './methods';\nimport { DelegationChain } from '@dfinity/identity';\n\nexport class AstroXIdentity extends SignIdentity {\n  #principal?: Principal;\n\n  constructor(private _cacheKey: string, private _chain: DelegationChain) {\n    super();\n  }\n\n  public getPublicKey(): PublicKey {\n    return {\n      toDer: () => this._chain.publicKey,\n    };\n  }\n\n  public getPrincipal(): Principal {\n    if (!this.#principal) {\n      this.#principal = Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n    }\n    return this.#principal;\n  }\n\n  async sign(blob: ArrayBuffer): Promise<Signature> {\n    try {\n      const hex = toHexString(blob);\n      const signedResponse = await _ms.signMessage.invoke(this._cacheKey, hex);\n      return fromHexString(signedResponse) as Signature;\n    } catch (error) {\n      throw new Error(`signing message error: ${(error as Error).message}`);\n    }\n  }\n\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    const { body, ...fields } = request;\n    const requestId = await requestIdOf(body);\n    const requestDomainSeparator = new TextEncoder().encode('\\x0Aic-request');\n    return {\n      ...fields,\n      body: {\n        content: body,\n        sender_sig: await this.sign(new Uint8Array([...requestDomainSeparator, ...new Uint8Array(requestId)])),\n        sender_delegation: this._chain.delegations,\n        sender_pubkey: this._chain.publicKey,\n      },\n    };\n  }\n}\n"],"names":["requestIdOf","SignIdentity","Principal","fromHexString","toHexString","_ms","AstroXIdentity","_cacheKey","_chain","getPublicKey","toDer","publicKey","getPrincipal","selfAuthenticating","Uint8Array","sign","blob","hex","signedResponse","error","signMessage","invoke","Error","message","transformRequest","request","body","fields","requestId","requestDomainSeparator","TextEncoder","encode","content","sender_sig","sender_delegation","delegations","sender_pubkey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAsCA,WAAW,EAAaC,YAAY,QAAQ,iBAAiB;AACnG,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,aAAa,EAAEC,WAAW,QAAQ,6BAA6B;AACxE,YAAYC,SAAS,YAAY;IAI/B;AADF,OAAO,IAAA,AAAMC,+BAAN;;cAAMA;aAAAA,eAGC,AAAQC,SAAiB,EAAE,AAAQC,MAAuB;gCAH3DF;;gBAIT,kBAJSA,0GACX,iCAAA;;mBAAA,KAAA;kBAEoBC,YAAAA,iBAA2BC,SAAAA;;;kBAHpCF;;YAOJG,KAAAA;mBAAP,SAAOA;;gBACL,OAAO;oBACLC,OAAO;+BAAM,MAAKF,MAAM,CAACG,SAAS;;gBACpC;YACF;;;YAEOC,KAAAA;mBAAP,SAAOA;gBACL,IAAI,0BAAC,IAAI,EAAC,aAAY;mDACf,YAAaV,UAAUW,kBAAkB,CAAC,IAAIC,WAAW,IAAI,CAACL,YAAY,GAAGC,KAAK;gBACzF;gBACA,gCAAO,IAAI,EAAC;YACd;;;YAEMK,KAAAA;mBAAN,SAAMA,KAAKC,IAAiB;;uBAA5B,oBAAA;wBAEUC,KACAC,gBAECC;;;;;;;;;;gCAHDF,MAAMb,YAAYY;gCACD;;oCAAMX,IAAIe,WAAW,CAACC,MAAM,CAAC,MAAKd,SAAS,EAAEU;;;gCAA9DC,iBAAiB;gCACvB;;oCAAOf,cAAce;;;gCACdC;gCACP,MAAM,IAAIG,MAAM,AAAC,0BAAkD,OAAzB,AAACH,MAAgBI,OAAO;;;;;;;gBAEtE;;;;YAEaC,KAAAA;mBAAb,SAAaA,iBAAiBC,OAAyB;;uBAAvD,oBAAA;wBACUC,MAASC,QACXC,WACAC;;;;gCAFEH,OAAoBD,QAApBC,MAASC,oCAAWF;oCAApBC;;gCACU;;oCAAM1B,YAAY0B;;;gCAA9BE,YAAY;gCACZC,yBAAyB,IAAIC,cAAcC,MAAM,CAAC;;uDAEnDJ;;;;oCAEDK,SAASN;;gCACG;;oCAAM,MAAKX,IAAI,CAAC,IAAID,WAAW,AAAC,qBAAGe,+BAAwB,qBAAG,IAAIf,WAAWc;;;gCAJ7F;;oCAAO;+CAELF,cAEEO,aAAY,qBACZC,oBAAmB,MAAK1B,MAAM,CAAC2B,WAAW,QAC1CC,gBAAe,MAAK5B,MAAM,CAACG,SAAS;;;;;gBAG1C;;;;WA3CWL;EAAuBL,cA4CnC"}