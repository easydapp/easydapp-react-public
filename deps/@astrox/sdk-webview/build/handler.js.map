{"version":3,"sources":["../../src/handler.ts"],"sourcesContent":["import {\n  AbstractedClientStorage,\n  BaseTransactionRequest,\n  IWalletConnector,\n  TransferNFTWithIdentifier,\n  TransferToken,\n  Wallet,\n} from '@astrox/sdk-core';\n\nimport { DelegationChain } from '@dfinity/identity';\nimport { Actor, ActorSubclass, HttpAgent, PublicKey, SignIdentity } from '@dfinity/agent';\nimport { isDelegationValid } from './util';\nimport { ICStorage } from './storage';\nimport * as _ms from './methods';\nimport { Principal } from '@dfinity/principal';\nimport { InterfaceFactory } from '@dfinity/candid/lib/cjs/idl';\nimport {\n  BalanceResponseObject,\n  DelegationMode,\n  NFTTransferResponse,\n  SupportedToken,\n  TokenTransferResponse,\n  TransactionMessageKind,\n  TransactionResponse,\n  TransactionResponseFailure,\n  TransactionType,\n  WebViewAuthResponse,\n  WebViewConnectRequest,\n} from './types';\nimport { AstroXIdentity } from './identity';\nimport { BridgeErrors } from './errors';\nimport './cbor';\n\nconst KEY_ICSTORAGE_CACHEKEY = 'cacheKey';\nconst KEY_ICSTORAGE_CHAIN = 'chain';\nconst KEY_ICSTORAGE_WALLET = 'wallet';\nconst KEY_ICSTORAGE_CONFIRM = 'confirm';\nconst KEY_ICSTORAGE_HOST = 'host';\nconst KEY_CUSTOM_DOMAIN = 'customDomain';\n\nexport class AstroXWebViewHandler implements IWalletConnector {\n  principal: string | undefined;\n  private _isReady: boolean = false;\n\n  constructor(\n    private _identity?: SignIdentity,\n    private _agent?: HttpAgent,\n    private _chain?: DelegationChain,\n    private _storage?: AbstractedClientStorage,\n    private _cacheKey?: string,\n    private _wallet?: Wallet,\n    private _confirm?: boolean,\n    private _host?: string,\n    private _customDomain?: string,\n  ) {\n    this._injectWindow();\n  }\n\n  private setCacheKey(value: string) {\n    this._cacheKey = value;\n    this._storage!.set(KEY_ICSTORAGE_CACHEKEY, value);\n  }\n\n  private get cacheKey(): string | undefined {\n    return this._cacheKey;\n  }\n\n  private setWallet(value: Wallet) {\n    this._wallet = value;\n    this._storage!.set(KEY_ICSTORAGE_WALLET, JSON.stringify({ ...value }));\n  }\n\n  public get wallet(): Wallet {\n    return this._wallet!;\n  }\n\n  private setChain(value: DelegationChain) {\n    this._chain = value;\n    this._storage!.set(KEY_ICSTORAGE_CHAIN, JSON.stringify(value?.toJSON()));\n  }\n\n  private get chain(): DelegationChain | undefined {\n    return this._chain;\n  }\n\n  private setConfirm(value: boolean) {\n    this._confirm = value;\n    this._storage!.set(KEY_ICSTORAGE_CONFIRM, String(value));\n  }\n\n  private get confirm(): boolean | undefined {\n    return this._confirm;\n  }\n\n  private setIdentity(value: SignIdentity) {\n    this._identity = value;\n  }\n\n  public get identity(): SignIdentity | undefined {\n    return this._identity;\n  }\n\n  public setAgent(value: HttpAgent) {\n    this._agent = value;\n  }\n\n  public setHost(host: string) {\n    this._host = host;\n    this._storage!.set(KEY_ICSTORAGE_HOST, String(host));\n  }\n\n  public setCustomDomain(customDomain: string) {\n    this._customDomain = customDomain;\n    this._storage!.set(KEY_CUSTOM_DOMAIN, String(customDomain));\n  }\n\n  get host(): string {\n    return this._host!;\n  }\n\n  get customDomain(): string {\n    return this._customDomain!;\n  }\n\n  public get agent(): HttpAgent | undefined {\n    return this._agent;\n  }\n\n  public setStorage(storage: AbstractedClientStorage) {\n    this._storage = storage;\n  }\n\n  public get storage(): AbstractedClientStorage {\n    return this._storage!;\n  }\n\n  private clear() {\n    this._cacheKey = undefined;\n    this._confirm = undefined;\n    this._chain = undefined;\n    this._wallet = undefined;\n    this._identity = undefined;\n    this._agent = undefined;\n    this._storage!.remove(KEY_ICSTORAGE_CACHEKEY);\n    this._storage!.remove(KEY_ICSTORAGE_WALLET);\n    this._storage!.remove(KEY_ICSTORAGE_CHAIN);\n    this._storage!.remove(KEY_ICSTORAGE_CONFIRM);\n    this._storage!.remove(KEY_ICSTORAGE_HOST);\n    this._storage!.remove(KEY_CUSTOM_DOMAIN);\n  }\n\n  private _injectWindow() {\n    (window as any).icx = this;\n  }\n\n  private async _initBridge() {\n    try {\n      await this.fromStorage();\n      this._isReady = true;\n    } catch (e) {\n      console.log('AstroXWebViewBridge occurs error:', e);\n      throw e;\n    }\n  }\n\n  private async fromStorage(): Promise<void> {\n    const storage = new ICStorage('astrox-');\n    const cacheKey = await storage.get(KEY_ICSTORAGE_CACHEKEY);\n    this.setStorage(storage);\n    if (cacheKey) {\n      // Check flutter side identity state.\n      const connected = await _ms.isConnected.invoke(cacheKey);\n      if (!connected) {\n        this.clear();\n        return;\n      }\n      const chainString = await storage.get(KEY_ICSTORAGE_CHAIN);\n      const chain = chainString ? DelegationChain.fromJSON(chainString) : null;\n      // Check local DelegationChain is valid.\n      if (!chain || !isDelegationValid(chain)) {\n        this.clear();\n        return;\n      }\n      const identity = new AstroXIdentity(cacheKey, chain);\n      const walletJson = await storage.get(KEY_ICSTORAGE_WALLET);\n      const hostString = await storage.get(KEY_ICSTORAGE_HOST);\n      const customDomainString = await storage.get(KEY_CUSTOM_DOMAIN);\n      this.setHost(hostString!);\n      this.setCacheKey(cacheKey);\n      this.setChain(chain);\n      this.setWallet(walletJson ? JSON.parse(walletJson) : null);\n      this.setConfirm((await storage.get(KEY_ICSTORAGE_CONFIRM)) == 'true');\n      this.setIdentity(identity);\n      this.setAgent(new HttpAgent({ identity, host: hostString ?? window.location.origin }));\n      this.setCustomDomain(customDomainString!);\n    }\n  }\n\n  public isReady(): boolean {\n    return !!(window as any).astrox_webview && this._isReady;\n  }\n\n  public getDelegation(): DelegationChain | undefined {\n    return this._chain;\n  }\n\n  public getPublicKey(): PublicKey | undefined {\n    return this._identity?.getPublicKey();\n  }\n\n  public getPrincipal(): Principal | undefined {\n    return this._identity?.getPrincipal();\n  }\n\n  private _assertEnv() {\n    if (!this.isReady()) {\n      throw Error('Webview Bridge is not ready');\n    }\n  }\n\n  public async connect(params: WebViewConnectRequest): Promise<boolean> {\n    this._assertEnv();\n    if (!this.identity) {\n      return this.reconnect(params);\n    }\n    return true;\n  }\n\n  public async reconnect(params: WebViewConnectRequest): Promise<boolean> {\n    this._assertEnv();\n    let delegationModes = params.delegationModes;\n    if (delegationModes && delegationModes.length) {\n      const modes: DelegationMode[] = ['global', 'domain'];\n      const hasNotInclude = delegationModes.some(v => !modes.includes(v));\n      if (hasNotInclude) {\n        throw new Error('`delegationModes` elements only support `global` and `domain`');\n      }\n      delegationModes = [...new Set(delegationModes)];\n    }\n    const result = await _ms.connect.invoke({\n      ...params,\n      host: params.customDomain ?? window.location.origin,\n      delegationTargets: params.delegationTargets?.filter(value => typeof value === 'string' && value.trim()),\n      delegationModes,\n    });\n    return this._handleWebViewConnectResponse(result, params.host, params.customDomain);\n  }\n\n  private _handleWebViewConnectResponse(result: WebViewAuthResponse, host?: string, customDomain?: string): boolean {\n    const { authorized, payload } = result;\n    if (!authorized) {\n      return false;\n    }\n    if (!payload) {\n      return true;\n    }\n    if (!payload.chain) {\n      return false;\n    }\n    let chainObject: DelegationChain | undefined;\n    try {\n      chainObject = DelegationChain.fromJSON(payload.chain);\n    } catch (error) {\n      return false;\n    }\n    if (isDelegationValid(chainObject)) {\n      this.setChain(chainObject);\n      this.setCacheKey(payload.cacheKey);\n      this.setWallet(payload.wallet!);\n      this.setIdentity(new AstroXIdentity(this._cacheKey!, this._chain!));\n      this.setConfirm(payload.confirm === true);\n      this.setAgent(new HttpAgent({ identity: this._identity, host: host ?? window.location.origin }));\n      this.setHost(host ?? window.location.origin);\n      this.setCustomDomain(customDomain!);\n      return true;\n    }\n    return false;\n  }\n\n  public async getSupportedTokenList(): Promise<Array<SupportedToken>> {\n    this._assertEnv();\n    return _ms.supportedStandardList.invoke();\n  }\n\n  public async isConnected(): Promise<boolean> {\n    this._assertEnv();\n    return !!this.cacheKey && (await _ms.isConnected.invoke(this.cacheKey));\n  }\n\n  public async disconnect(): Promise<boolean> {\n    this._assertEnv();\n    this.cacheKey && (await _ms.disconnect.invoke(this.cacheKey));\n    this.clear();\n    return true;\n  }\n\n  public async signMessage(message: any): Promise<any> {\n    throw new Error('Unsupported api');\n  }\n\n  public async requestTransfer(req: BaseTransactionRequest): Promise<TransactionResponse> {\n    this._assertEnv();\n\n    if (!this.cacheKey) {\n      return BridgeErrors.fromErrorCode(BridgeErrors.bridgeIdentityNotFound, TransactionMessageKind.fail);\n    }\n\n    if (!this._wallet) {\n      return BridgeErrors.fromErrorCode(BridgeErrors.bridgeWalletNotFound, TransactionMessageKind.fail);\n    }\n\n    let rawSendOpts = req.sendOpts;\n    let sendOpts;\n    if (rawSendOpts) {\n      const memo = rawSendOpts.memo;\n      if (memo) {\n        const standard = req.standard.toUpperCase();\n        if (standard === 'EXT' && !Array.isArray(memo)) {\n          throw new Error('`sendOpts.memo` only supports `Array<number>` type when the standard is `EXT`');\n        }\n        if (standard === 'ICP' && typeof memo !== 'bigint') {\n          throw new Error('`sendOpts.memo` only supports `bigint` type when the standard is `ICP`');\n        }\n      }\n      let createdAtTime = rawSendOpts.created_at_time;\n      sendOpts = { ...rawSendOpts };\n      if (createdAtTime) {\n        if (createdAtTime instanceof Date) {\n          sendOpts.created_at_time = createdAtTime.getTime();\n        }\n      }\n    }\n    try {\n      let txType: TransactionType = (req as TransferToken).symbol !== undefined ? TransactionType.token : TransactionType.nft;\n\n      const success = await _ms.requestTransfer.invoke(\n        this.cacheKey,\n        {\n          ...req,\n          sendOpts,\n        },\n        this._wallet,\n      );\n\n      switch (txType) {\n        case TransactionType.token:\n          return {\n            kind: TransactionMessageKind.success,\n            type: txType,\n            payload: {\n              ...success,\n              originPayload: req as TransferToken,\n            } as TokenTransferResponse,\n          };\n        case TransactionType.nft:\n          return {\n            kind: TransactionMessageKind.success,\n            type: txType,\n            payload: {\n              success: true,\n              originPayload: req as TransferNFTWithIdentifier,\n            } as NFTTransferResponse,\n          };\n      }\n    } catch (e) {\n      const { code, message } = JSON.parse((e as Error).message) as {\n        code: number;\n        message: string;\n      };\n\n      return BridgeErrors.fromErrorCode(code, TransactionMessageKind.fail, message) as TransactionResponseFailure;\n    }\n  }\n\n  public async queryBalance(): Promise<BalanceResponseObject[]> {\n    this._assertEnv();\n    return await _ms.queryBalance.invoke({ ...this.wallet });\n  }\n\n  config: any;\n  public createActor = async <T>(canisterId: string, idlFactory: InterfaceFactory): Promise<ActorSubclass<T>> => {\n    this._assertEnv();\n    if (this._confirm) {\n      const authed = this._handleWebViewConnectResponse(\n        await _ms.appendAuth.invoke(this._cacheKey, this._wallet, [canisterId]),\n        this.host,\n        this.customDomain,\n      );\n      if (!authed) {\n        throw new Error('User cancel authorization');\n      }\n    }\n    return Actor.createActor<T>(idlFactory, {\n      agent: this._agent,\n      canisterId,\n    });\n  };\n\n  public address(): { principal?: string; accountId?: string } {\n    return { ...this.wallet };\n  }\n\n  public async init(): Promise<any> {\n    await this._initBridge();\n    this._assertEnv();\n  }\n}\n"],"names":["DelegationChain","Actor","HttpAgent","isDelegationValid","ICStorage","_ms","TransactionMessageKind","TransactionType","AstroXIdentity","BridgeErrors","KEY_ICSTORAGE_CACHEKEY","KEY_ICSTORAGE_CHAIN","KEY_ICSTORAGE_WALLET","KEY_ICSTORAGE_CONFIRM","KEY_ICSTORAGE_HOST","KEY_CUSTOM_DOMAIN","AstroXWebViewHandler","_identity","_agent","_chain","_storage","_cacheKey","_wallet","_confirm","_host","_customDomain","principal","_isReady","config","createActor","canisterId","idlFactory","authed","_assertEnv","_handleWebViewConnectResponse","appendAuth","invoke","host","customDomain","Error","agent","_injectWindow","setCacheKey","value","set","cacheKey","setWallet","JSON","stringify","wallet","setChain","toJSON","chain","setConfirm","String","confirm","setIdentity","identity","setAgent","setHost","setCustomDomain","setStorage","storage","clear","undefined","remove","window","icx","_initBridge","e","fromStorage","console","log","connected","chainString","walletJson","hostString","customDomainString","get","isConnected","fromJSON","parse","location","origin","isReady","astrox_webview","getDelegation","getPublicKey","getPrincipal","connect","params","reconnect","delegationModes","modes","hasNotInclude","result","length","some","v","includes","Set","delegationTargets","filter","trim","authorized","payload","chainObject","error","getSupportedTokenList","supportedStandardList","disconnect","signMessage","message","requestTransfer","req","rawSendOpts","sendOpts","memo","standard","createdAtTime","txType","success","code","fromErrorCode","bridgeIdentityNotFound","fail","bridgeWalletNotFound","toUpperCase","Array","isArray","created_at_time","Date","getTime","symbol","token","nft","kind","type","originPayload","queryBalance","address","init"],"mappings":"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"}